var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.565,1,2.094]],["body/controllers/AppController.html",[0,2.882,1,3.402,2,2.058,3,0.446,4,0.392,5,0.339,6,3.554,7,0.624,8,4.39,9,0.503,10,1.823,11,5.95,12,1.476,13,0.032,14,0.829,15,4.249,16,5.25,17,5.25,18,3.402,19,1.554,20,1.434,21,5.25,22,0.562,23,1.16,24,0.446,25,0.056,26,0.984,27,2.058,28,0.025,29,0.025]],["title/modules/AppModule.html",[30,1.216,31,2.094]],["body/modules/AppModule.html",[1,3.225,2,2.119,3,0.337,4,0.296,5,0.256,13,0.032,22,0.806,23,0.877,24,0.337,25,0.043,26,1.014,28,0.021,29,0.021,30,1.647,31,3.994,32,1.426,33,1.787,34,2.685,35,2.685,36,3.059,37,3.059,38,3.059,39,2.319,40,1.426,41,1.702,42,3.21,43,3.12,44,2.685,45,1.874,46,4.162,47,4.939,48,2.339,49,2.685,50,2.08,51,3.21,52,4.977,53,1.702,54,1.555,55,2.685,56,2.685,57,2.339,58,2.685,59,3.21,60,3.21,61,3.21,62,3.659,63,1.943,64,0.38,65,2.339,66,3.187,67,3.21,68,3.187,69,3.21,70,2.685,71,3.21,72,2.685,73,3.21,74,2.685,75,3.21,76,2.685,77,3.21,78,3.21,79,2.554,80,2.685,81,2.554,82,3.21,83,2.08,84,2.685,85,2.685,86,1.874]],["title/classes/BaseSchema.html",[25,0.043,87,1.886]],["body/classes/BaseSchema.html",[3,0.359,4,0.315,5,0.273,7,0.502,9,0.404,12,1.784,13,0.031,14,1.002,22,0.452,24,0.359,25,0.045,28,0.022,29,0.022,64,0.608,87,3.199,88,1.286,89,4.584,90,2.856,91,4.561,92,3.815,93,4.561,94,4.561,95,4.561,96,2.662,97,4.561,98,2.418,99,5.136,100,1.246,101,3.701,102,2.537,103,3.701,104,3.199,105,5.136,106,3.415,107,3.199,108,2.418,109,3.552,110,2.435,111,3.199,112,1.864,113,5.136,114,3.415,115,2.956,116,2.662,117,2.956,118,2.956,119,5.136,120,3.415,121,2.662,122,2.418,123,2.956,124,1.811,125,3.415]],["title/modules/CacheWrapperModule.html",[30,1.216,36,1.713]],["body/modules/CacheWrapperModule.html",[2,1.805,3,0.391,4,0.343,5,0.298,13,0.031,22,0.777,23,1.017,24,0.391,25,0.049,26,0.863,28,0.023,29,0.023,30,1.819,32,1.655,33,1.974,36,3.249,39,2.561,40,1.655,41,1.975,43,2.82,46,4.04,47,4.743,48,2.714,62,3.116,63,1.655,64,0.441,66,2.714,68,2.714,79,2.175,81,2.175,83,3.13,84,3.116,85,3.116,86,2.82,126,3.116,127,3.116,128,3.116,129,3.401,130,2.714,131,3.726,132,3.13,133,3.726,134,3.726,135,4.831,136,3.13,137,2.714,138,4.04,139,3.116,140,3.726,141,3.726]],["title/injectables/CacheWrapperService.html",[129,1.713,142,1.122]],["body/injectables/CacheWrapperService.html",[3,0.228,4,0.2,5,0.174,7,0.741,9,0.257,10,1.147,13,0.032,14,0.984,18,2.587,19,1.553,20,1.692,22,0.437,23,0.593,24,0.228,25,0.029,26,0.765,28,0.016,29,0.016,40,1.98,63,2.46,64,0.621,81,1.268,112,2.063,116,3.472,129,1.75,130,3.822,136,3.889,137,1.583,142,1.147,143,1.152,144,1.817,145,1.033,146,2.761,147,2.761,148,1.599,149,3.248,150,1.181,151,2.173,152,2.173,153,1.927,154,1.822,155,1.207,156,1.537,157,3.992,158,3.301,159,3.301,160,2.173,161,3.301,162,3.719,163,3.301,164,2.173,165,3.301,166,5.406,167,4.491,168,3.301,169,2.173,170,3.301,171,3.301,172,3.301,173,4.722,174,2.173,175,3.301,176,3.301,177,3.939,178,4.458,179,3.301,180,3.301,181,4.795,182,2.173,183,2.173,184,3.301,185,3.301,186,2.139,187,1.599,188,3.301,189,2.139,190,2.173,191,1.542,192,1.052,193,0.462,194,1.583,195,2.173,196,0.888,197,1.408,198,2.116,199,2.173,200,2.173,201,2.173,202,2.173,203,2.173]],["title/classes/CreateScanRequestDto.html",[25,0.043,204,1.565]],["body/classes/CreateScanRequestDto.html",[3,0.311,4,0.273,5,0.236,7,0.434,9,0.35,12,1.027,13,0.032,14,0.577,20,1.483,22,0.631,24,0.434,25,0.063,27,1.433,28,0.02,29,0.02,64,0.35,88,1.114,100,1.129,101,2.679,102,2.117,103,2.679,104,2.782,107,2.782,108,1.568,109,2.679,110,1.837,111,2.413,112,1.208,115,1.917,116,1.726,117,1.917,118,1.917,121,2.413,122,1.568,123,1.917,145,1.304,148,1.433,150,0.875,155,1.2,191,0.808,193,1.014,204,2.002,205,3.012,206,1.568,207,3.089,208,3.012,209,2.5,210,2.736,211,2.958,212,2.958,213,1.689,214,3.495,215,1.433,216,3.458,217,3.458,218,2.155,219,1.2,220,1.314,221,1.027,222,1.433,223,1.314,224,1.433,225,1.917,226,1.917,227,1.568,228,1.208,229,1.568,230,1.726,231,2.782,232,2.413,233,1.568,234,1.568,235,1.726,236,1.726,237,2.474,238,2.474,239,2.474,240,2.474,241,2.474,242,2.474,243,2.474,244,2.474,245,2.474,246,2.474,247,2.474,248,2.155,249,2.474,250,2.474]],["title/classes/CreateScanResponseDto.html",[25,0.043,223,1.435]],["body/classes/CreateScanResponseDto.html",[3,0.245,4,0.215,5,0.187,7,0.512,9,0.277,12,1.868,13,0.032,14,1.078,20,1.468,22,0.552,24,0.366,25,0.055,27,1.689,28,0.017,29,0.017,64,0.654,88,0.88,100,0.952,101,3.206,102,2.389,103,3.206,104,3.029,107,3.029,108,1.849,109,2.997,110,2.054,111,2.7,112,1.425,115,2.26,116,2.035,117,2.26,118,2.26,121,2.7,122,1.849,123,2.26,145,1.309,148,1.689,150,1.235,154,0.812,155,1.164,156,0.749,191,0.638,193,1.104,204,1.132,205,4.116,206,1.239,207,2.703,208,1.703,209,2.396,210,2.452,213,0.955,214,3.575,215,1.132,216,2.916,217,2.916,218,1.703,219,1.306,220,1.038,221,0.812,222,1.689,223,1.549,224,1.689,225,2.26,226,2.26,227,1.849,228,1.425,229,2.211,230,2.035,231,3.139,232,2.7,233,1.849,234,1.849,235,2.435,236,2.035,237,1.954,238,1.954,239,1.954,240,1.954,241,1.954,242,1.954,243,1.954,244,1.954,245,1.954,246,1.954,247,1.954,248,1.703,249,1.954,250,1.954,251,3.487,252,2.337,253,2.337,254,1.954,255,2.337,256,1.954,257,2.337]],["title/interfaces/EventInterface.html",[258,2.094,259,2.094]],["body/interfaces/EventInterface.html",[3,0.429,4,0.377,5,0.326,7,0.6,9,0.484,13,0.031,20,1.743,24,0.429,28,0.024,29,0.024,64,0.662,100,1.399,193,1.191,210,3.111,219,1.29,228,1.67,229,2.717,230,2.991,258,3.32,259,3.32,260,4.087,261,2.386,262,3.418,263,5.158,264,5.158,265,2.093,266,5.124]],["title/classes/EventQueueConsumer.html",[25,0.043,267,2.094]],["body/classes/EventQueueConsumer.html",[3,0.353,4,0.31,5,0.269,7,0.749,9,0.398,10,1.569,12,1.169,13,0.032,14,0.881,19,1.337,22,0.674,24,0.353,25,0.045,26,0.78,28,0.021,29,0.021,45,1.964,54,2.469,63,2.265,64,0.535,88,1.267,145,1.356,150,1.509,154,1.569,155,1.137,156,1.448,187,2.188,191,1.233,193,1.293,197,2.181,198,1.784,228,1.845,261,2.976,267,2.927,268,2.815,269,5.449,270,4.517,271,3.366,272,2.889,273,3.366,274,5.098,275,4.753,276,4.517,277,4.531,278,2.976,279,3.366,280,4.517,281,4.517,282,2.452,283,3.366,284,2.815,285,3.366,286,2.452,287,2.181,288,3.366,289,3.366]],["title/modules/EventQueueModule.html",[30,1.216,37,1.713]],["body/modules/EventQueueModule.html",[2,1.864,3,0.404,4,0.355,5,0.307,13,0.031,22,0.785,23,1.051,24,0.404,25,0.051,28,0.023,29,0.023,30,1.857,32,1.71,33,2.016,37,3.349,39,2.615,40,1.71,41,2.041,43,2.88,44,3.22,45,2.247,54,1.864,86,2.88,132,3.197,155,0.969,192,3.121,193,1.05,261,2.247,267,3.197,290,3.22,291,3.22,292,3.22,293,3.22,294,3.545,295,3.85,296,3.85,297,3.85,298,3.22,299,3.85,300,3.85]],["title/injectables/EventQueueProducer.html",[142,1.122,192,1.565]],["body/injectables/EventQueueProducer.html",[3,0.302,4,0.265,5,0.229,7,0.748,9,0.34,10,1.407,13,0.032,14,0.915,19,1.508,22,0.711,23,0.784,24,0.302,25,0.038,26,0.938,28,0.019,29,0.019,45,1.677,54,2.468,64,0.555,79,1.677,142,1.407,143,1.523,145,1.245,150,1.389,154,1.63,155,1.181,156,1.504,187,2.98,191,1.281,192,1.962,193,1.362,194,3.712,196,2.082,210,1.523,219,1.442,221,0.998,227,2.147,228,2.463,259,3.301,261,2.974,263,2.402,264,2.402,277,2.951,282,2.093,301,2.402,302,4.05,303,4.05,304,2.872,305,2.872,306,4.692,307,4.05,308,2.872,309,4.05,310,2.872,311,2.364,312,4.05,313,4.05,314,2.872,315,2.872,316,2.402,317,2.872,318,2.147,319,2.872,320,2.872,321,2.872,322,2.872,323,2.872]],["title/classes/FindOneScanResponseDto.html",[25,0.043,324,1.713]],["body/classes/FindOneScanResponseDto.html",[3,0.232,4,0.204,5,0.177,7,0.592,9,0.262,10,1.162,12,1.888,13,0.032,14,1.106,19,0.99,20,1.388,22,0.534,24,0.232,25,0.053,26,0.775,27,1.071,28,0.016,29,0.016,64,0.691,88,0.832,98,1.773,100,0.913,101,2.614,102,1.998,103,2.614,104,2.355,107,2.355,108,1.172,109,2.167,110,1.486,111,1.952,112,0.903,115,1.433,116,1.29,117,1.433,118,1.433,121,1.952,122,1.172,123,1.433,145,1.177,148,1.071,150,1.194,154,1.162,155,1.015,156,1.072,191,0.913,193,0.957,196,1.648,206,1.172,209,2.34,210,1.773,214,3.484,215,1.071,219,1.279,220,0.982,221,0.768,222,1.954,223,2.519,224,1.071,225,1.433,226,1.433,227,1.172,228,0.903,229,1.773,230,1.29,231,2.625,232,1.952,233,1.172,234,1.172,235,1.952,236,1.952,254,2.797,311,1.952,324,1.773,325,2.915,326,1.773,327,2.939,328,3.345,329,2.82,330,2.747,331,5.278,332,2.211,333,2.211,334,2.211,335,2.211,336,2.211,337,2.211,338,2.211,339,2.437,340,2.211,341,2.437,342,2.437,343,2.437,344,2.437,345,1.071,346,1.172,347,2.076,348,2.966,349,2.355,350,1.611,351,2.437,352,2.437,353,2.167,354,1.611,355,1.611,356,1.611,357,1.611,358,1.611,359,1.611,360,1.611]],["title/classes/FindingResponseDto.html",[25,0.043,329,1.886]],["body/classes/FindingResponseDto.html",[3,0.314,4,0.276,5,0.239,7,0.439,9,0.354,12,1.447,13,0.032,14,0.812,19,0.885,20,1.309,22,0.634,24,0.314,25,0.064,26,0.965,28,0.02,29,0.02,64,0.686,88,1.126,98,1.585,100,1.137,145,0.965,150,0.885,191,1.137,193,0.636,196,1.221,206,1.585,209,2.511,214,3.449,215,1.448,219,1.207,220,1.328,221,1.038,222,2.322,223,1.85,236,1.745,256,2.5,311,1.745,324,1.585,325,3.106,326,1.585,327,2.178,329,3.027,330,2.64,339,2.178,341,2.178,342,2.178,343,2.178,344,2.178,345,1.448,346,1.585,347,2.452,348,3.548,349,2.798,350,2.178,351,3.035,352,3.035,353,2.699,354,2.178,355,2.178,356,2.178,357,2.178,358,2.178,359,2.178,360,2.178,361,2.99]],["title/classes/Location.html",[25,0.043,348,1.886]],["body/classes/Location.html",[3,0.312,4,0.274,5,0.237,7,0.436,9,0.352,12,1.44,13,0.032,14,0.809,19,0.879,20,1.412,22,0.632,24,0.312,25,0.063,26,0.961,28,0.02,29,0.02,64,0.667,88,1.118,98,1.575,100,1.132,145,0.961,150,0.879,191,1.132,193,0.632,196,1.214,206,1.575,209,2.314,214,3.443,215,1.439,219,1.203,220,1.319,221,1.032,222,2.008,223,1.842,236,1.734,311,1.734,324,1.575,325,3.096,326,1.575,327,2.164,329,2.789,330,2.634,339,2.164,341,2.164,342,2.164,343,2.164,344,2.164,345,1.439,346,1.575,347,2.448,348,3.443,349,3.289,350,3.021,351,3.767,352,3.021,353,2.687,354,2.164,355,2.164,356,2.164,357,2.164,358,2.164,359,2.164,360,2.164,362,2.971,363,2.971,364,2.971]],["title/entities/ScanEvent.html",[219,0.813,265,1.32]],["body/entities/ScanEvent.html",[3,0.252,4,0.221,5,0.192,7,0.353,9,0.502,12,1.935,13,0.032,14,1.086,20,1.431,22,0.561,24,0.252,25,0.032,27,2.424,28,0.017,29,0.017,64,0.659,79,3.06,87,2.077,96,1.402,98,1.273,100,0.972,102,1.581,104,3.252,107,3.252,108,1.273,121,2.077,124,1.273,145,1.291,148,2.698,155,1.067,156,1.786,193,1.116,210,2.247,213,1.454,219,0.896,224,1.723,225,2.306,226,2.306,227,1.887,228,1.454,229,2.653,230,2.077,231,3.506,232,3.167,233,2.653,234,2.653,235,2.474,265,1.915,330,2.424,347,2.142,365,4.759,366,2.008,367,3.545,368,3.545,369,3.545,370,4.239,371,2.402,372,2.402,373,4.842,374,2.402,375,2.402,376,2.402,377,2.402,378,2.592,379,2.402,380,2.402,381,2.402,382,2.402,383,2.402,384,3.558,385,2.402,386,2.976,387,3.558,388,2.008,389,2.008,390,2.402,391,2.402,392,2.402,393,4.239]],["title/injectables/ScanEventContext.html",[142,1.122,394,1.565]],["body/injectables/ScanEventContext.html",[3,0.188,4,0.165,5,0.143,7,0.766,9,0.212,10,0.985,13,0.032,14,0.988,19,1.583,20,0.963,22,0.616,23,0.488,24,0.188,25,0.024,26,0.817,27,1.708,28,0.013,29,0.013,50,1.158,63,2.466,64,0.6,79,1.043,102,1.26,110,1.783,111,1.656,122,2.128,124,0.948,142,0.985,143,0.948,145,1.444,150,1.188,154,1.76,155,1.275,156,1.625,162,3.283,186,1.838,187,2.824,191,1.49,193,1.348,196,1.159,198,2.128,204,1.944,213,2.229,219,1.513,220,0.794,221,0.621,224,1.374,229,1.87,231,2.058,232,1.656,233,2.589,234,1.87,235,1.043,265,1.159,330,1.708,345,2.257,346,0.948,347,2.132,367,1.495,368,1.495,369,1.495,394,1.374,395,4.365,396,1.495,397,2.601,398,2.837,399,2.837,400,1.838,401,2.837,402,2.837,403,1.788,404,4.015,405,1.788,406,3.527,407,2.837,408,1.788,409,5.347,410,4.66,411,2.067,412,1.788,413,2.569,414,3.358,415,2.837,416,1.788,417,2.837,418,1.788,419,2.837,420,2.837,421,1.788,422,2.837,423,1.788,424,2.837,425,1.788,426,1.788,427,1.302,428,1.495,429,1.788,430,1.788,431,1.788,432,4.015,433,3.527,434,1.788,435,1.788,436,1.788,437,1.788]],["title/injectables/ScanEventProcessor.html",[142,1.122,272,1.713]],["body/injectables/ScanEventProcessor.html",[3,0.247,4,0.217,5,0.28,7,0.682,9,0.496,10,1.219,13,0.032,14,0.968,18,2.274,19,1.375,22,0.689,23,0.644,24,0.247,25,0.031,26,0.546,28,0.017,29,0.017,63,2.461,64,0.55,81,1.376,100,0.958,112,1.434,142,1.219,143,1.249,145,1.399,150,1.375,153,2.711,154,1.456,155,1.055,156,1.344,162,3.218,191,1.268,193,1.321,196,2.203,198,2.462,213,1.898,219,1.25,221,0.819,228,1.898,265,1.434,272,1.86,275,3.884,278,2.898,287,2.274,316,1.971,318,2.223,326,1.86,330,2.249,349,2.048,394,2.683,397,2.274,438,4.354,439,1.971,440,3.509,441,3.373,442,4.192,443,2.357,444,5.541,445,3.509,446,3.509,447,2.357,448,2.935,449,2.935,450,2.357,451,3.509,452,2.357,453,3.884,454,3.509,455,2.357,456,2.935,457,1.717,458,1.717,459,3.509,460,1.971,461,1.717,462,2.357,463,2.357,464,1.717,465,1.971,466,2.357,467,2.357,468,2.357,469,2.357,470,4.192,471,2.357,472,2.935,473,2.357,474,2.357,475,1.971,476,1.971,477,1.971,478,2.357,479,2.357,480,2.357,481,2.357,482,2.357,483,2.357,484,2.357]],["title/controllers/ScansController.html",[0,1.565,485,2.094]],["body/controllers/ScansController.html",[0,2.428,2,1.341,3,0.291,4,0.255,5,0.221,7,0.675,9,0.328,10,1.371,12,1.371,13,0.032,14,0.77,19,1.484,20,1.256,22,0.75,23,0.756,24,0.291,25,0.037,26,0.914,28,0.019,29,0.019,53,2.092,63,2.447,64,0.467,102,2.354,145,1.47,150,0.82,153,1.617,154,1.371,155,0.993,156,1.265,186,2.558,187,2.428,191,1.369,193,1.067,197,2.558,198,2.092,204,2.428,207,2.558,209,1.912,213,1.613,215,1.341,223,1.23,224,1.912,233,1.468,286,2.018,287,1.795,318,2.092,324,1.468,326,2.657,345,1.912,346,2.092,400,2.558,411,2.018,413,3.35,427,2.018,485,2.558,486,2.316,487,2.77,488,2.316,489,2.77,490,2.77,491,3.301,492,5.012,493,2.316,494,2.77,495,2.77,496,4.431,497,3.301,498,2.77,499,2.657,500,2.316,501,2.77,502,2.77,503,2.018,504,2.77,505,2.018,506,2.77,507,1.795,508,2.77,509,2.77,510,2.77,511,2.77,512,2.77,513,2.77,514,2.77,515,2.77,516,2.77,517,2.77,518,2.77,519,2.77,520,2.77]],["title/modules/ScansModule.html",[30,1.216,38,1.713]],["body/modules/ScansModule.html",[2,2.261,3,0.371,4,0.326,5,0.282,13,0.032,22,0.822,23,0.966,24,0.371,25,0.047,28,0.022,29,0.022,30,1.758,32,1.571,33,1.907,36,3.146,37,2.475,38,3.353,39,2.475,40,1.571,41,1.875,43,2.725,49,2.958,50,2.292,53,1.875,54,1.713,55,2.958,57,2.576,58,2.958,86,2.725,132,3.025,219,0.89,220,1.571,221,1.228,347,1.907,394,3.083,428,2.958,457,3.401,464,2.576,485,3.386,499,3.146,500,2.958,521,2.958,522,2.958,523,2.958,524,3.537,525,3.537,526,3.537,527,2.958,528,3.537]],["title/injectables/ScansService.html",[142,1.122,499,1.713]],["body/injectables/ScansService.html",[3,0.27,4,0.237,5,0.205,7,0.711,9,0.304,10,1.299,13,0.032,14,0.86,19,1.433,20,1.204,22,0.733,23,0.702,24,0.27,25,0.034,26,1.021,27,1.245,28,0.018,29,0.018,53,1.363,54,1.245,57,1.872,63,2.385,64,0.522,81,1.5,102,2.151,129,2.938,139,2.149,142,1.299,143,1.363,145,1.44,146,3.128,150,1.433,153,2.183,154,1.532,155,1.11,156,1.414,186,2.424,191,1.322,192,2.751,193,1.283,194,2.725,196,1.801,197,2.424,198,2.338,204,2.345,207,2.424,209,1.811,213,1.528,219,1.429,220,1.142,221,0.893,224,1.811,234,1.363,248,2.725,287,2.857,298,2.149,318,1.363,345,2.345,346,1.363,394,2.751,397,2.424,400,2.424,411,2.725,413,2.725,427,1.872,457,1.872,464,1.872,465,2.149,491,3.128,493,3.128,496,3.128,499,1.983,527,2.149,529,2.149,530,2.57,531,2.57,532,2.57,533,2.57,534,2.725,535,2.57,536,2.57,537,2.57,538,2.57,539,2.57,540,2.57,541,2.57]],["title/classes/UtilsService.html",[25,0.043,441,2.094]],["body/classes/UtilsService.html",[3,0.299,4,0.263,5,0.227,7,0.686,9,0.337,10,1.399,13,0.032,14,0.99,19,1.502,24,0.299,25,0.038,26,1.082,28,0.019,29,0.019,64,0.477,88,1.073,100,1.1,110,1.789,112,2.564,153,1.663,154,1.399,155,1.014,156,1.291,162,2.609,167,2.075,177,2.934,191,1.1,196,1.908,278,2.35,318,1.51,378,3.403,414,4.649,441,3.846,449,4.649,456,2.383,472,3.368,475,4.246,542,2.383,543,5.559,544,5.936,545,5.076,546,4.027,547,4.027,548,2.849,549,2.849,550,4.027,551,4.027,552,4.027,553,2.849,554,3.368,555,5.559,556,4.671,557,5.559,558,4.027,559,2.849,560,4.027,561,5.076,562,4.246,563,5.076,564,4.671,565,2.849,566,4.671,567,4.027,568,2.383,569,2.849,570,2.849]],["title/classes/ViewInterceptor.html",[25,0.043,571,2.354]],["body/classes/ViewInterceptor.html",[0,2.026,3,0.316,4,0.277,5,0.24,7,0.706,9,0.356,10,1.453,13,0.032,14,0.816,19,1.238,22,0.723,23,0.822,24,0.316,25,0.055,26,1.114,28,0.02,29,0.02,53,1.595,64,0.495,88,1.133,110,1.337,149,3.048,150,1.424,154,1.453,155,1.053,156,1.342,187,1.457,189,2.711,191,1.314,208,3.048,222,2.947,286,2.192,318,2.218,397,3.369,460,2.517,461,2.192,507,3.835,571,3.048,572,2.517,573,5.2,574,4.184,575,4.184,576,4.811,577,5.2,578,3.009,579,6.01,580,3.009,581,4.184,582,4.184,583,5.2,584,5.2,585,5.2,586,3.009,587,4.184,588,4.184,589,4.184,590,5.465,591,2.517,592,3.009,593,2.517,594,3.009,595,3.009,596,3.009,597,3.009,598,3.009,599,3.009,600,3.009,601,3.009,602,2.517,603,3.009,604,3.009,605,3.009]],["title/entities/Vulnerability.html",[265,1.32,347,1.32]],["body/entities/Vulnerability.html",[3,0.372,4,0.327,5,0.283,7,0.521,9,0.619,12,1.818,13,0.032,14,1.02,20,1.277,22,0.692,24,0.372,25,0.047,28,0.022,29,0.022,64,0.619,87,2.73,96,2.07,98,1.88,100,1.277,112,1.911,124,1.88,145,1.212,155,0.892,193,0.995,219,1.565,221,1.232,265,2.273,330,1.717,347,2.565,349,3.375,353,3.747,373,4.836,386,4.653,388,2.965,389,2.965,606,2.965,607,3.546,608,3.546,609,3.546,610,4.676,611,3.546,612,4.676]],["title/modules/WorkersModule.html",[30,1.216,294,1.886]],["body/modules/WorkersModule.html",[3,0.423,4,0.371,5,0.322,13,0.031,22,0.772,23,1.1,24,0.423,25,0.053,28,0.024,29,0.024,30,1.912,32,1.789,33,2.074,38,3.258,39,2.692,40,1.789,41,2.135,43,2.964,56,3.369,86,2.964,132,3.29,145,0.933,272,3.438,284,3.369,294,3.717,458,2.934,613,3.369,614,3.369,615,3.369,616,4.028,617,4.028,618,5.077]],["title/coverage.html",[619,3.201]],["body/coverage.html",[0,2.042,1,1.971,5,0.243,6,2.544,13,0.031,18,1.971,25,0.08,28,0.02,29,0.02,54,2.042,64,0.36,87,1.776,89,2.544,90,2.544,110,1.351,129,1.613,130,2.216,142,1.906,144,2.544,192,1.473,204,1.473,205,3.071,206,2.909,219,0.766,223,1.351,258,1.971,259,1.971,261,2.824,262,2.544,265,1.722,267,1.971,268,2.544,272,1.613,301,2.544,324,1.613,325,3.135,329,1.776,347,1.243,348,1.776,365,2.544,366,2.544,394,1.473,395,2.544,396,2.544,438,2.544,439,2.544,441,1.971,485,1.971,486,2.544,499,1.613,503,2.216,505,2.216,507,1.971,529,2.544,534,2.216,542,2.544,571,2.216,572,2.544,606,2.544,619,2.216,620,3.042,621,3.042,622,3.042,623,6.561,624,4.216,625,3.042,626,5.224,627,2.544,628,5.821,629,6.099,630,2.544,631,2.544,632,2.544,633,5.487,634,3.042,635,2.544,636,2.544,637,2.544,638,2.544,639,2.544,640,2.544,641,2.544,642,2.544,643,2.544,644,2.544,645,4.216,646,3.042,647,3.042,648,3.042,649,3.042]],["title/dependencies.html",[33,1.586,650,2.263]],["body/dependencies.html",[13,0.032,23,1.084,25,0.067,28,0.024,29,0.024,33,1.622,45,2.318,48,2.893,50,2.573,83,2.573,124,2.105,136,3.26,137,3.665,138,3.321,215,1.923,218,2.893,282,2.893,458,2.893,461,2.893,591,3.321,593,3.321,651,3.971,652,3.971,653,5.031,654,3.971,655,3.971,656,5.807,657,3.971,658,3.971,659,3.971,660,3.971,661,5.031,662,3.971,663,3.971,664,3.971,665,3.971,666,3.971,667,3.971,668,3.971,669,3.971,670,3.971,671,3.971,672,3.971,673,3.971,674,3.971,675,3.971,676,3.971,677,3.971,678,2.893,679,3.971,680,3.971,681,3.971]],["title/miscellaneous/functions.html",[682,1.434,683,3.246]],["body/miscellaneous/functions.html",[9,0.589,13,0.027,28,0.027,29,0.027,637,4.164,638,5.245,682,2.64,683,4.164,684,4.979,685,4.164]],["title/index.html",[9,0.32,686,2.706,687,2.706]],["body/index.html",[5,0.258,7,0.475,8,2.704,13,0.028,28,0.021,29,0.021,33,1.321,65,2.355,74,4.177,83,2.095,108,1.714,124,1.714,145,1.157,148,2.129,177,2.355,189,3.237,193,0.688,213,1.321,277,2.355,278,2.915,311,2.915,326,2.33,345,2.419,448,2.704,476,3.676,477,3.676,488,2.704,497,2.704,554,2.704,619,3.202,678,2.355,685,2.704,688,4.995,689,3.233,690,4.396,691,3.233,692,3.233,693,3.233,694,3.233,695,3.233,696,3.233,697,4.396,698,3.233,699,3.233,700,3.233,701,3.233,702,3.233,703,5.916,704,3.233,705,3.233,706,4.396,707,6.104,708,4.396,709,3.233,710,4.396,711,4.995,712,4.995,713,3.233,714,3.233,715,3.676,716,3.202,717,4.396,718,3.233,719,4.396,720,6.32,721,3.233,722,3.233,723,4.396,724,3.233,725,4.396,726,3.233,727,3.233,728,3.233,729,3.233,730,4.396,731,3.233,732,3.233,733,3.233,734,4.396,735,3.233,736,3.233,737,3.233,738,5.606,739,3.233,740,3.233,741,3.233,742,3.233,743,3.233,744,3.233,745,3.233,746,4.396,747,3.233]],["title/modules.html",[32,1.952]],["body/modules.html",[13,0.027,28,0.027,29,0.027,31,3.052,32,2.092,36,2.497,37,2.497,38,2.497,294,2.749,748,6.29,749,6.29,750,6.29,751,6.29]],["title/overview.html",[752,3.675]],["body/overview.html",[2,1.722,13,0.031,28,0.022,29,0.022,31,3.985,32,1.579,33,1.914,34,2.973,35,2.973,36,3.213,37,3.26,38,3.356,39,2.483,40,1.579,41,1.885,88,1.338,96,2.075,126,2.973,127,2.973,128,2.973,129,3.213,143,1.885,192,2.935,258,2.303,272,3.213,290,2.973,291,2.973,292,2.973,293,2.973,294,3.59,394,2.935,499,2.778,521,2.973,522,2.973,523,2.973,562,2.973,613,2.973,614,2.973,615,2.973,752,2.973,753,4.684,754,4.684,755,3.555]],["title/properties.html",[100,1.06,650,2.263]],["body/properties.html",[7,0.729,13,0.031,28,0.027,29,0.027,100,1.355,756,4.961,757,4.961,758,4.961,759,4.961,760,4.961]],["title/miscellaneous/typealiases.html",[682,1.434,761,3.882]],["body/miscellaneous/typealiases.html",[9,0.594,13,0.028,28,0.028,29,0.028,64,0.594,682,2.659,762,5.015,763,4.848,764,5.015,765,5.015]],["title/miscellaneous/variables.html",[682,1.434,716,2.828]],["body/miscellaneous/variables.html",[0,1.448,4,0.276,9,0.354,13,0.032,20,1.542,25,0.04,26,0.693,28,0.02,29,0.02,40,1.328,53,1.585,64,0.686,65,3.035,66,2.178,68,2.178,70,2.5,72,2.5,76,2.5,80,2.5,92,2.5,96,1.745,100,0.816,112,1.221,122,1.585,136,1.937,147,2.5,148,2.017,149,3.035,167,4.22,173,2.5,187,2.017,189,1.937,213,1.221,222,1.448,227,1.585,228,1.221,265,1.221,278,1.745,378,4.22,400,1.937,453,2.5,503,3.035,505,3.035,507,3.533,534,3.035,568,2.5,602,2.5,627,2.5,630,2.5,631,3.484,632,2.5,635,2.5,636,3.484,639,2.5,640,3.484,641,2.5,642,3.484,643,2.5,644,3.484,678,2.178,682,1.585,715,2.5,716,2.178,763,2.5,766,2.99,767,2.99,768,2.99,769,2.99,770,2.99,771,2.99,772,2.99,773,2.99,774,2.99,775,2.99,776,2.99,777,2.99,778,2.99,779,2.99,780,2.99,781,4.166,782,4.794,783,6.078,784,4.794,785,2.99,786,2.99,787,2.99,788,2.99,789,2.99,790,4.166,791,2.99,792,2.99,793,2.99,794,4.166,795,2.99,796,4.166,797,2.99,798,2.99,799,2.99,800,2.99]]],"invertedIndex":[["",{"_index":13,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/BaseSchema.html":{},"modules/CacheWrapperModule.html":{},"injectables/CacheWrapperService.html":{},"classes/CreateScanRequestDto.html":{},"classes/CreateScanResponseDto.html":{},"interfaces/EventInterface.html":{},"classes/EventQueueConsumer.html":{},"modules/EventQueueModule.html":{},"injectables/EventQueueProducer.html":{},"classes/FindOneScanResponseDto.html":{},"classes/FindingResponseDto.html":{},"classes/Location.html":{},"entities/ScanEvent.html":{},"injectables/ScanEventContext.html":{},"injectables/ScanEventProcessor.html":{},"controllers/ScansController.html":{},"modules/ScansModule.html":{},"injectables/ScansService.html":{},"classes/UtilsService.html":{},"classes/ViewInterceptor.html":{},"entities/Vulnerability.html":{},"modules/WorkersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":472,"title":{},"body":{"injectables/ScanEventProcessor.html":{},"classes/UtilsService.html":{}}}],["0.0.1",{"_index":757,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":674,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":669,"title":{},"body":{"dependencies.html":{}}}],["0.3.11",{"_index":681,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":668,"title":{},"body":{"dependencies.html":{}}}],["0.6.2",{"_index":654,"title":{},"body":{"dependencies.html":{}}}],["1",{"_index":562,"title":{},"body":{"classes/UtilsService.html":{},"overview.html":{}}}],["1.1.19",{"_index":652,"title":{},"body":{"dependencies.html":{}}}],["1.3.2",{"_index":665,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":629,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":563,"title":{},"body":{"classes/UtilsService.html":{}}}],["100",{"_index":623,"title":{},"body":{"coverage.html":{}}}],["1000",{"_index":568,"title":{},"body":{"classes/UtilsService.html":{},"miscellaneous/variables.html":{}}}],["11/11",{"_index":646,"title":{},"body":{"coverage.html":{}}}],["2",{"_index":754,"title":{},"body":{"overview.html":{}}}],["2.0.0",{"_index":653,"title":{},"body":{"dependencies.html":{}}}],["2.2.0",{"_index":657,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":624,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":778,"title":{},"body":{"miscellaneous/variables.html":{}}}],["24",{"_index":795,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3.0.2",{"_index":676,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":633,"title":{},"body":{"coverage.html":{}}}],["4.10.2",{"_index":666,"title":{},"body":{"dependencies.html":{}}}],["4.6.0",{"_index":680,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":626,"title":{},"body":{"coverage.html":{}}}],["5",{"_index":753,"title":{},"body":{"overview.html":{}}}],["5.1.6",{"_index":667,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":634,"title":{},"body":{"coverage.html":{}}}],["6.2.1",{"_index":662,"title":{},"body":{"dependencies.html":{}}}],["6/6",{"_index":647,"title":{},"body":{"coverage.html":{}}}],["60",{"_index":796,"title":{},"body":{"miscellaneous/variables.html":{}}}],["7",{"_index":794,"title":{},"body":{"miscellaneous/variables.html":{}}}],["7.2.0",{"_index":677,"title":{},"body":{"dependencies.html":{}}}],["7/7",{"_index":625,"title":{},"body":{"coverage.html":{}}}],["8.8.0",{"_index":671,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":755,"title":{},"body":{"overview.html":{}}}],["9.0.0",{"_index":656,"title":{},"body":{"dependencies.html":{}}}],["9.0.1",{"_index":663,"title":{},"body":{"dependencies.html":{}}}],["9/9",{"_index":645,"title":{},"body":{"coverage.html":{}}}],["__dirname}/migrations/*.ts",{"_index":793,"title":{},"body":{"miscellaneous/variables.html":{}}}],["abstract",{"_index":125,"title":{},"body":{"classes/BaseSchema.html":{}}}],["access",{"_index":551,"title":{},"body":{"classes/UtilsService.html":{}}}],["action",{"_index":263,"title":{},"body":{"interfaces/EventInterface.html":{},"injectables/EventQueueProducer.html":{}}}],["add",{"_index":227,"title":{},"body":{"classes/CreateScanRequestDto.html":{},"classes/CreateScanResponseDto.html":{},"injectables/EventQueueProducer.html":{},"classes/FindOneScanResponseDto.html":{},"entities/ScanEvent.html":{},"miscellaneous/variables.html":{}}}],["addevent",{"_index":302,"title":{},"body":{"injectables/EventQueueProducer.html":{}}}],["addevent(data",{"_index":307,"title":{},"body":{"injectables/EventQueueProducer.html":{}}}],["aliases",{"_index":762,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["another",{"_index":185,"title":{},"body":{"injectables/CacheWrapperService.html":{}}}],["api",{"_index":505,"title":{},"body":{"controllers/ScansController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["api/scan",{"_index":488,"title":{},"body":{"controllers/ScansController.html":{},"index.html":{}}}],["api/scan/:uuid",{"_index":698,"title":{},"body":{"index.html":{}}}],["apiextramodels",{"_index":502,"title":{},"body":{"controllers/ScansController.html":{}}}],["apiextramodels(createscanresponsedto",{"_index":511,"title":{},"body":{"controllers/ScansController.html":{}}}],["apiextramodels(findonescanresponsedto",{"_index":517,"title":{},"body":{"controllers/ScansController.html":{}}}],["apiproperty",{"_index":214,"title":{},"body":{"classes/CreateScanRequestDto.html":{},"classes/CreateScanResponseDto.html":{},"classes/FindOneScanResponseDto.html":{},"classes/FindingResponseDto.html":{},"classes/Location.html":{}}}],["apiresponse",{"_index":776,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"index.html":{}}}],["app.controller",{"_index":51,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":685,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["applydecorators",{"_index":775,"title":{},"body":{"miscellaneous/variables.html":{}}}],["appmodule",{"_index":31,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["array).join",{"_index":484,"title":{},"body":{"injectables/ScanEventProcessor.html":{}}}],["async",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"modules/CacheWrapperModule.html":{},"injectables/CacheWrapperService.html":{},"classes/EventQueueConsumer.html":{},"injectables/ScanEventContext.html":{},"injectables/ScanEventProcessor.html":{},"controllers/ScansController.html":{},"injectables/ScansService.html":{}}}],["author",{"_index":760,"title":{},"body":{"properties.html":{}}}],["autoloadentities",{"_index":78,"title":{},"body":{"modules/AppModule.html":{}}}],["automatic",{"_index":117,"title":{},"body":{"classes/BaseSchema.html":{},"classes/CreateScanRequestDto.html":{},"classes/CreateScanResponseDto.html":{},"classes/FindOneScanResponseDto.html":{}}}],["await",{"_index":198,"title":{},"body":{"injectables/CacheWrapperService.html":{},"classes/EventQueueConsumer.html":{},"injectables/ScanEventContext.html":{},"injectables/ScanEventProcessor.html":{},"controllers/ScansController.html":{},"injectables/ScansService.html":{}}}],["axios",{"_index":664,"title":{},"body":{"dependencies.html":{}}}],["background",{"_index":695,"title":{},"body":{"index.html":{}}}],["base",{"_index":91,"title":{},"body":{"classes/BaseSchema.html":{}}}],["baseapiresponse",{"_index":503,"title":{},"body":{"controllers/ScansController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["baseapiresponse(createscanresponsedto",{"_index":512,"title":{},"body":{"controllers/ScansController.html":{}}}],["baseapiresponse(findonescanresponsedto",{"_index":518,"title":{},"body":{"controllers/ScansController.html":{}}}],["baseentity",{"_index":99,"title":{},"body":{"classes/BaseSchema.html":{}}}],["baseschema",{"_index":87,"title":{"classes/BaseSchema.html":{}},"body":{"classes/BaseSchema.html":{},"entities/ScanEvent.html":{},"entities/Vulnerability.html":{},"coverage.html":{}}}],["before",{"_index":731,"title":{},"body":{"index.html":{}}}],["begin",{"_index":352,"title":{},"body":{"classes/FindOneScanResponseDto.html":{},"classes/FindingResponseDto.html":{},"classes/Location.html":{}}}],["body",{"_index":498,"title":{},"body":{"controllers/ScansController.html":{}}}],["bootstrap",{"_index":638,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":751,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":748,"title":{},"body":{"modules.html":{}}}],["build",{"_index":311,"title":{},"body":{"injectables/EventQueueProducer.html":{},"classes/FindOneScanResponseDto.html":{},"classes/FindingResponseDto.html":{},"classes/Location.html":{},"index.html":{}}}],["buildevent",{"_index":303,"title":{},"body":{"injectables/EventQueueProducer.html":{}}}],["buildevent(data",{"_index":309,"title":{},"body":{"injectables/EventQueueProducer.html":{}}}],["buildfindings",{"_index":328,"title":{},"body":{"classes/FindOneScanResponseDto.html":{}}}],["buildfindings(vulnerabilities",{"_index":339,"title":{},"body":{"classes/FindOneScanResponseDto.html":{},"classes/FindingResponseDto.html":{},"classes/Location.html":{}}}],["buildpath",{"_index":442,"title":{},"body":{"injectables/ScanEventProcessor.html":{}}}],["built",{"_index":730,"title":{},"body":{"index.html":{}}}],["bull",{"_index":282,"title":{},"body":{"classes/EventQueueConsumer.html":{},"injectables/EventQueueProducer.html":{},"dependencies.html":{}}}],["bullmodule",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"modules/EventQueueModule.html":{}}}],["bullmodule.forrootasync",{"_index":82,"title":{},"body":{"modules/AppModule.html":{}}}],["bullmodule.registerqueue",{"_index":299,"title":{},"body":{"modules/EventQueueModule.html":{}}}],["cache",{"_index":136,"title":{},"body":{"modules/CacheWrapperModule.html":{},"injectables/CacheWrapperService.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["cache/cache",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"modules/ScansModule.html":{},"injectables/ScansService.html":{}}}],["cache_manager",{"_index":190,"title":{},"body":{"injectables/CacheWrapperService.html":{}}}],["cached",{"_index":166,"title":{},"body":{"injectables/CacheWrapperService.html":{}}}],["cachemanager",{"_index":157,"title":{},"body":{"injectables/CacheWrapperService.html":{}}}],["cachemock",{"_index":640,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["cachemodule",{"_index":133,"title":{},"body":{"modules/CacheWrapperModule.html":{}}}],["cachemodule.registerasync",{"_index":140,"title":{},"body":{"modules/CacheWrapperModule.html":{}}}],["caches",{"_index":171,"title":{},"body":{"injectables/CacheWrapperService.html":{}}}],["cachewrappermodule",{"_index":36,"title":{"modules/CacheWrapperModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CacheWrapperModule.html":{},"modules/ScansModule.html":{},"modules.html":{},"overview.html":{}}}],["cachewrapperservice",{"_index":129,"title":{"injectables/CacheWrapperService.html":{}},"body":{"modules/CacheWrapperModule.html":{},"injectables/CacheWrapperService.html":{},"injectables/ScansService.html":{},"coverage.html":{},"overview.html":{}}}],["call",{"_index":588,"title":{},"body":{"classes/ViewInterceptor.html":{}}}],["callhandler",{"_index":585,"title":{},"body":{"classes/ViewInterceptor.html":{}}}],["change",{"_index":409,"title":{},"body":{"injectables/ScanEventContext.html":{}}}],["changed",{"_index":121,"title":{},"body":{"classes/BaseSchema.html":{},"classes/CreateScanRequestDto.html":{},"classes/CreateScanResponseDto.html":{},"classes/FindOneScanResponseDto.html":{},"entities/ScanEvent.html":{}}}],["check",{"_index":17,"title":{},"body":{"controllers/AppController.html":{}}}],["class",{"_index":25,"title":{"classes/BaseSchema.html":{},"classes/CreateScanRequestDto.html":{},"classes/CreateScanResponseDto.html":{},"classes/EventQueueConsumer.html":{},"classes/FindOneScanResponseDto.html":{},"classes/FindingResponseDto.html":{},"classes/Location.html":{},"classes/UtilsService.html":{},"classes/ViewInterceptor.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/BaseSchema.html":{},"modules/CacheWrapperModule.html":{},"injectables/CacheWrapperService.html":{},"classes/CreateScanRequestDto.html":{},"classes/CreateScanResponseDto.html":{},"classes/EventQueueConsumer.html":{},"modules/EventQueueModule.html":{},"injectables/EventQueueProducer.html":{},"classes/FindOneScanResponseDto.html":{},"classes/FindingResponseDto.html":{},"classes/Location.html":{},"entities/ScanEvent.html":{},"injectables/ScanEventContext.html":{},"injectables/ScanEventProcessor.html":{},"controllers/ScansController.html":{},"modules/ScansModule.html":{},"injectables/ScansService.html":{},"classes/UtilsService.html":{},"classes/ViewInterceptor.html":{},"entities/Vulnerability.html":{},"modules/WorkersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["classes",{"_index":88,"title":{},"body":{"classes/BaseSchema.html":{},"classes/CreateScanRequestDto.html":{},"classes/CreateScanResponseDto.html":{},"classes/EventQueueConsumer.html":{},"classes/FindOneScanResponseDto.html":{},"classes/FindingResponseDto.html":{},"classes/Location.html":{},"classes/UtilsService.html":{},"classes/ViewInterceptor.html":{},"overview.html":{}}}],["clear",{"_index":170,"title":{},"body":{"injectables/CacheWrapperService.html":{}}}],["cluster_appmodule",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_cachewrappermodule",{"_index":126,"title":{},"body":{"modules/CacheWrapperModule.html":{},"overview.html":{}}}],["cluster_cachewrappermodule_exports",{"_index":127,"title":{},"body":{"modules/CacheWrapperModule.html":{},"overview.html":{}}}],["cluster_cachewrappermodule_providers",{"_index":128,"title":{},"body":{"modules/CacheWrapperModule.html":{},"overview.html":{}}}],["cluster_eventqueuemodule",{"_index":290,"title":{},"body":{"modules/EventQueueModule.html":{},"overview.html":{}}}],["cluster_eventqueuemodule_exports",{"_index":291,"title":{},"body":{"modules/EventQueueModule.html":{},"overview.html":{}}}],["cluster_eventqueuemodule_imports",{"_index":293,"title":{},"body":{"modules/EventQueueModule.html":{},"overview.html":{}}}],["cluster_eventqueuemodule_providers",{"_index":292,"title":{},"body":{"modules/EventQueueModule.html":{},"overview.html":{}}}],["cluster_scansmodule",{"_index":521,"title":{},"body":{"modules/ScansModule.html":{},"overview.html":{}}}],["cluster_scansmodule_exports",{"_index":522,"title":{},"body":{"modules/ScansModule.html":{},"overview.html":{}}}],["cluster_scansmodule_imports",{"_index":524,"title":{},"body":{"modules/ScansModule.html":{}}}],["cluster_scansmodule_providers",{"_index":523,"title":{},"body":{"modules/ScansModule.html":{},"overview.html":{}}}],["cluster_workersmodule",{"_index":613,"title":{},"body":{"modules/WorkersModule.html":{},"overview.html":{}}}],["cluster_workersmodule_exports",{"_index":614,"title":{},"body":{"modules/WorkersModule.html":{},"overview.html":{}}}],["cluster_workersmodule_imports",{"_index":616,"title":{},"body":{"modules/WorkersModule.html":{}}}],["cluster_workersmodule_providers",{"_index":615,"title":{},"body":{"modules/WorkersModule.html":{},"overview.html":{}}}],["code",{"_index":477,"title":{},"body":{"injectables/ScanEventProcessor.html":{},"index.html":{}}}],["code_scanning_test",{"_index":742,"title":{},"body":{"index.html":{}}}],["column",{"_index":373,"title":{},"body":{"entities/ScanEvent.html":{},"entities/Vulnerability.html":{}}}],["column({enum",{"_index":376,"title":{},"body":{"entities/ScanEvent.html":{}}}],["column({nullable",{"_index":370,"title":{},"body":{"entities/ScanEvent.html":{}}}],["common",{"_index":94,"title":{},"body":{"classes/BaseSchema.html":{}}}],["common/base",{"_index":388,"title":{},"body":{"entities/ScanEvent.html":{},"entities/Vulnerability.html":{}}}],["common/constants",{"_index":535,"title":{},"body":{"injectables/ScansService.html":{}}}],["common/decorators/base",{"_index":504,"title":{},"body":{"controllers/ScansController.html":{}}}],["common/decorators/view.decorator",{"_index":508,"title":{},"body":{"controllers/ScansController.html":{}}}],["common/utils.service",{"_index":462,"title":{},"body":{"injectables/ScanEventProcessor.html":{}}}],["completeevent",{"_index":398,"title":{},"body":{"injectables/ScanEventContext.html":{}}}],["completeevent(event",{"_index":407,"title":{},"body":{"injectables/ScanEventContext.html":{}}}],["compodoc/compodoc",{"_index":651,"title":{},"body":{"dependencies.html":{}}}],["compose",{"_index":711,"title":{},"body":{"index.html":{}}}],["configmodule",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"modules/CacheWrapperModule.html":{}}}],["configmodule.forroot",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"modules/CacheWrapperModule.html":{}}}],["configservice.get('database').database",{"_index":75,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database').host",{"_index":67,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database').password",{"_index":73,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database').poolsize",{"_index":77,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database').port",{"_index":69,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database').username",{"_index":71,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('queue').host",{"_index":84,"title":{},"body":{"modules/AppModule.html":{},"modules/CacheWrapperModule.html":{}}}],["configservice.get('queue').port",{"_index":85,"title":{},"body":{"modules/AppModule.html":{},"modules/CacheWrapperModule.html":{}}}],["configuration",{"_index":52,"title":{},"body":{"modules/AppModule.html":{}}}],["const",{"_index":318,"title":{},"body":{"injectables/EventQueueProducer.html":{},"injectables/ScanEventProcessor.html":{},"controllers/ScansController.html":{},"injectables/ScansService.html":{},"classes/UtilsService.html":{},"classes/ViewInterceptor.html":{}}}],["construct",{"_index":587,"title":{},"body":{"classes/ViewInterceptor.html":{}}}],["constructed",{"_index":313,"title":{},"body":{"injectables/EventQueueProducer.html":{}}}],["constructor",{"_index":150,"title":{},"body":{"injectables/CacheWrapperService.html":{},"classes/CreateScanRequestDto.html":{},"classes/CreateScanResponseDto.html":{},"classes/EventQueueConsumer.html":{},"injectables/EventQueueProducer.html":{},"classes/FindOneScanResponseDto.html":{},"classes/FindingResponseDto.html":{},"classes/Location.html":{},"injectables/ScanEventContext.html":{},"injectables/ScanEventProcessor.html":{},"controllers/ScansController.html":{},"injectables/ScansService.html":{},"classes/ViewInterceptor.html":{}}}],["constructor(@inject(cache_manager",{"_index":195,"title":{},"body":{"injectables/CacheWrapperService.html":{}}}],["constructor(@injectqueue('scan_event",{"_index":317,"title":{},"body":{"injectables/EventQueueProducer.html":{}}}],["constructor(cachemanager",{"_index":151,"title":{},"body":{"injectables/CacheWrapperService.html":{}}}],["constructor(eventqueue",{"_index":304,"title":{},"body":{"injectables/EventQueueProducer.html":{}}}],["constructor(eventqueueproducer",{"_index":530,"title":{},"body":{"injectables/ScansService.html":{}}}],["constructor(private",{"_index":286,"title":{},"body":{"classes/EventQueueConsumer.html":{},"controllers/ScansController.html":{},"classes/ViewInterceptor.html":{}}}],["constructor(reflector",{"_index":578,"title":{},"body":{"classes/ViewInterceptor.html":{}}}],["constructor(scanevent",{"_index":236,"title":{},"body":{"classes/CreateScanRequestDto.html":{},"classes/CreateScanResponseDto.html":{},"classes/FindOneScanResponseDto.html":{},"classes/FindingResponseDto.html":{},"classes/Location.html":{}}}],["constructor(scaneventcontext",{"_index":443,"title":{},"body":{"injectables/ScanEventProcessor.html":{}}}],["constructor(scaneventprocesor",{"_index":271,"title":{},"body":{"classes/EventQueueConsumer.html":{}}}],["constructor(scaneventrepository",{"_index":403,"title":{},"body":{"injectables/ScanEventContext.html":{}}}],["consumer",{"_index":269,"title":{},"body":{"classes/EventQueueConsumer.html":{}}}],["context",{"_index":397,"title":{},"body":{"injectables/ScanEventContext.html":{},"injectables/ScanEventProcessor.html":{},"injectables/ScansService.html":{},"classes/ViewInterceptor.html":{}}}],["context.gethandler",{"_index":596,"title":{},"body":{"classes/ViewInterceptor.html":{}}}],["context.switchtohttp().getresponse().statuscode",{"_index":603,"title":{},"body":{"classes/ViewInterceptor.html":{}}}],["contexts/scan",{"_index":527,"title":{},"body":{"modules/ScansModule.html":{},"injectables/ScansService.html":{}}}],["control",{"_index":550,"title":{},"body":{"classes/UtilsService.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/ScansController.html":{}},"body":{"controllers/AppController.html":{},"controllers/ScansController.html":{},"classes/ViewInterceptor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["controller('/api/scan",{"_index":509,"title":{},"body":{"controllers/ScansController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/CacheWrapperModule.html":{},"modules/EventQueueModule.html":{},"controllers/ScansController.html":{},"modules/ScansModule.html":{},"overview.html":{}}}],["coverage",{"_index":619,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["coverage/lcov",{"_index":744,"title":{},"body":{"index.html":{}}}],["cp",{"_index":717,"title":{},"body":{"index.html":{}}}],["create",{"_index":345,"title":{},"body":{"classes/FindOneScanResponseDto.html":{},"classes/FindingResponseDto.html":{},"classes/Location.html":{},"injectables/ScanEventContext.html":{},"controllers/ScansController.html":{},"injectables/ScansService.html":{},"index.html":{}}}],["create(@body",{"_index":513,"title":{},"body":{"controllers/ScansController.html":{}}}],["create(createscandto",{"_index":411,"title":{},"body":{"injectables/ScanEventContext.html":{},"controllers/ScansController.html":{},"injectables/ScansService.html":{}}}],["createdatecolumn",{"_index":105,"title":{},"body":{"classes/BaseSchema.html":{}}}],["createddate",{"_index":101,"title":{},"body":{"classes/BaseSchema.html":{},"classes/CreateScanRequestDto.html":{},"classes/CreateScanResponseDto.html":{},"classes/FindOneScanResponseDto.html":{}}}],["createscandto",{"_index":413,"title":{},"body":{"injectables/ScanEventContext.html":{},"controllers/ScansController.html":{},"injectables/ScansService.html":{}}}],["createscanrequestdto",{"_index":204,"title":{"classes/CreateScanRequestDto.html":{}},"body":{"classes/CreateScanRequestDto.html":{},"classes/CreateScanResponseDto.html":{},"injectables/ScanEventContext.html":{},"controllers/ScansController.html":{},"injectables/ScansService.html":{},"coverage.html":{}}}],["createscanresponsedto",{"_index":223,"title":{"classes/CreateScanResponseDto.html":{}},"body":{"classes/CreateScanRequestDto.html":{},"classes/CreateScanResponseDto.html":{},"classes/FindOneScanResponseDto.html":{},"classes/FindingResponseDto.html":{},"classes/Location.html":{},"controllers/ScansController.html":{},"coverage.html":{}}}],["createscanresponsedto:26",{"_index":333,"title":{},"body":{"classes/FindOneScanResponseDto.html":{}}}],["createscanresponsedto:32",{"_index":332,"title":{},"body":{"classes/FindOneScanResponseDto.html":{}}}],["createscanresponsedto:38",{"_index":337,"title":{},"body":{"classes/FindOneScanResponseDto.html":{}}}],["createscanresponsedto:43",{"_index":338,"title":{},"body":{"classes/FindOneScanResponseDto.html":{}}}],["createscanresponsedto:49",{"_index":335,"title":{},"body":{"classes/FindOneScanResponseDto.html":{}}}],["createscanresponsedto:55",{"_index":336,"title":{},"body":{"classes/FindOneScanResponseDto.html":{}}}],["createscanresponsedto:61",{"_index":334,"title":{},"body":{"classes/FindOneScanResponseDto.html":{}}}],["createvulnerability",{"_index":399,"title":{},"body":{"injectables/ScanEventContext.html":{}}}],["createvulnerability(scanevent",{"_index":415,"title":{},"body":{"injectables/ScanEventContext.html":{}}}],["creation",{"_index":207,"title":{},"body":{"classes/CreateScanRequestDto.html":{},"classes/CreateScanResponseDto.html":{},"controllers/ScansController.html":{},"injectables/ScansService.html":{}}}],["current",{"_index":560,"title":{},"body":{"classes/UtilsService.html":{}}}],["d",{"_index":712,"title":{},"body":{"index.html":{}}}],["data",{"_index":187,"title":{},"body":{"injectables/CacheWrapperService.html":{},"classes/EventQueueConsumer.html":{},"injectables/EventQueueProducer.html":{},"injectables/ScanEventContext.html":{},"controllers/ScansController.html":{},"classes/ViewInterceptor.html":{},"miscellaneous/variables.html":{}}}],["data.data",{"_index":483,"title":{},"body":{"injectables/ScanEventProcessor.html":{}}}],["data.message",{"_index":604,"title":{},"body":{"classes/ViewInterceptor.html":{}}}],["data.repsositoryname",{"_index":323,"title":{},"body":{"injectables/EventQueueProducer.html":{}}}],["data.uuid",{"_index":322,"title":{},"body":{"injectables/EventQueueProducer.html":{}}}],["database",{"_index":74,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["datasource",{"_index":636,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["date",{"_index":104,"title":{},"body":{"classes/BaseSchema.html":{},"classes/CreateScanRequestDto.html":{},"classes/CreateScanResponseDto.html":{},"classes/FindOneScanResponseDto.html":{},"entities/ScanEvent.html":{}}}],["date().toisostring",{"_index":432,"title":{},"body":{"injectables/ScanEventContext.html":{}}}],["datetime",{"_index":107,"title":{},"body":{"classes/BaseSchema.html":{},"classes/CreateScanRequestDto.html":{},"classes/CreateScanResponseDto.html":{},"classes/FindOneScanResponseDto.html":{},"entities/ScanEvent.html":{}}}],["days",{"_index":798,"title":{},"body":{"miscellaneous/variables.html":{}}}],["decorator",{"_index":781,"title":{},"body":{"miscellaneous/variables.html":{}}}],["decorators",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"classes/BaseSchema.html":{},"classes/CreateScanRequestDto.html":{},"classes/CreateScanResponseDto.html":{},"classes/EventQueueConsumer.html":{},"classes/FindOneScanResponseDto.html":{},"classes/FindingResponseDto.html":{},"classes/Location.html":{},"entities/ScanEvent.html":{},"controllers/ScansController.html":{},"entities/Vulnerability.html":{}}}],["default",{"_index":378,"title":{},"body":{"entities/ScanEvent.html":{},"classes/UtilsService.html":{},"miscellaneous/variables.html":{}}}],["define",{"_index":93,"title":{},"body":{"classes/BaseSchema.html":{}}}],["defined",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"classes/BaseSchema.html":{},"injectables/CacheWrapperService.html":{},"classes/CreateScanRequestDto.html":{},"classes/CreateScanResponseDto.html":{},"classes/EventQueueConsumer.html":{},"injectables/EventQueueProducer.html":{},"classes/FindOneScanResponseDto.html":{},"classes/FindingResponseDto.html":{},"classes/Location.html":{},"entities/ScanEvent.html":{},"injectables/ScanEventContext.html":{},"injectables/ScanEventProcessor.html":{},"controllers/ScansController.html":{},"injectables/ScansService.html":{},"classes/UtilsService.html":{},"classes/ViewInterceptor.html":{},"entities/Vulnerability.html":{}}}],["del",{"_index":147,"title":{},"body":{"injectables/CacheWrapperService.html":{},"miscellaneous/variables.html":{}}}],["del(key",{"_index":159,"title":{},"body":{"injectables/CacheWrapperService.html":{}}}],["delete",{"_index":161,"title":{},"body":{"injectables/CacheWrapperService.html":{}}}],["demand",{"_index":280,"title":{},"body":{"classes/EventQueueConsumer.html":{}}}],["dependencies",{"_index":33,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/CacheWrapperModule.html":{},"modules/EventQueueModule.html":{},"modules/ScansModule.html":{},"modules/WorkersModule.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["description",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"classes/BaseSchema.html":{},"injectables/CacheWrapperService.html":{},"classes/CreateScanRequestDto.html":{},"classes/CreateScanResponseDto.html":{},"interfaces/EventInterface.html":{},"classes/EventQueueConsumer.html":{},"injectables/EventQueueProducer.html":{},"classes/FindOneScanResponseDto.html":{},"classes/FindingResponseDto.html":{},"classes/Location.html":{},"entities/ScanEvent.html":{},"injectables/ScanEventContext.html":{},"injectables/ScanEventProcessor.html":{},"controllers/ScansController.html":{},"injectables/ScansService.html":{},"classes/UtilsService.html":{},"classes/ViewInterceptor.html":{},"entities/Vulnerability.html":{},"index.html":{},"properties.html":{}}}],["detail",{"_index":496,"title":{},"body":{"controllers/ScansController.html":{},"injectables/ScansService.html":{}}}],["dev.env.example",{"_index":718,"title":{},"body":{"index.html":{}}}],["development",{"_index":722,"title":{},"body":{"index.html":{}}}],["docker",{"_index":703,"title":{},"body":{"index.html":{}}}],["document",{"_index":734,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":620,"title":{},"body":{"coverage.html":{}}}],["documentation:serve",{"_index":735,"title":{},"body":{"index.html":{}}}],["done",{"_index":289,"title":{},"body":{"classes/EventQueueConsumer.html":{}}}],["dto",{"_index":209,"title":{},"body":{"classes/CreateScanRequestDto.html":{},"classes/CreateScanResponseDto.html":{},"classes/FindOneScanResponseDto.html":{},"classes/FindingResponseDto.html":{},"classes/Location.html":{},"controllers/ScansController.html":{},"injectables/ScansService.html":{}}}],["dto/create",{"_index":427,"title":{},"body":{"injectables/ScanEventContext.html":{},"controllers/ScansController.html":{},"injectables/ScansService.html":{}}}],["dto/findone",{"_index":501,"title":{},"body":{"controllers/ScansController.html":{}}}],["end",{"_index":746,"title":{},"body":{"index.html":{}}}],["entities",{"_index":96,"title":{},"body":{"classes/BaseSchema.html":{},"entities/ScanEvent.html":{},"entities/Vulnerability.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["entities/scan",{"_index":220,"title":{},"body":{"classes/CreateScanRequestDto.html":{},"classes/CreateScanResponseDto.html":{},"classes/FindOneScanResponseDto.html":{},"classes/FindingResponseDto.html":{},"classes/Location.html":{},"injectables/ScanEventContext.html":{},"modules/ScansModule.html":{},"injectables/ScansService.html":{}}}],["entities/vulnerability.entity",{"_index":428,"title":{},"body":{"injectables/ScanEventContext.html":{},"modules/ScansModule.html":{}}}],["entity",{"_index":265,"title":{"entities/ScanEvent.html":{},"entities/Vulnerability.html":{}},"body":{"interfaces/EventInterface.html":{},"entities/ScanEvent.html":{},"injectables/ScanEventContext.html":{},"injectables/ScanEventProcessor.html":{},"entities/Vulnerability.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["enum",{"_index":392,"title":{},"body":{"entities/ScanEvent.html":{}}}],["env",{"_index":719,"title":{},"body":{"index.html":{}}}],["environment",{"_index":715,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["event",{"_index":193,"title":{},"body":{"injectables/CacheWrapperService.html":{},"classes/CreateScanRequestDto.html":{},"classes/CreateScanResponseDto.html":{},"interfaces/EventInterface.html":{},"classes/EventQueueConsumer.html":{},"modules/EventQueueModule.html":{},"injectables/EventQueueProducer.html":{},"classes/FindOneScanResponseDto.html":{},"classes/FindingResponseDto.html":{},"classes/Location.html":{},"entities/ScanEvent.html":{},"injectables/ScanEventContext.html":{},"injectables/ScanEventProcessor.html":{},"controllers/ScansController.html":{},"injectables/ScansService.html":{},"entities/Vulnerability.html":{},"index.html":{}}}],["event.context",{"_index":464,"title":{},"body":{"injectables/ScanEventProcessor.html":{},"modules/ScansModule.html":{},"injectables/ScansService.html":{}}}],["event.context.ts",{"_index":396,"title":{},"body":{"injectables/ScanEventContext.html":{},"coverage.html":{}}}],["event.context.ts:107",{"_index":416,"title":{},"body":{"injectables/ScanEventContext.html":{}}}],["event.context.ts:12",{"_index":405,"title":{},"body":{"injectables/ScanEventContext.html":{}}}],["event.context.ts:32",{"_index":412,"title":{},"body":{"injectables/ScanEventContext.html":{}}}],["event.context.ts:44",{"_index":423,"title":{},"body":{"injectables/ScanEventContext.html":{}}}],["event.context.ts:56",{"_index":408,"title":{},"body":{"injectables/ScanEventContext.html":{}}}],["event.context.ts:68",{"_index":421,"title":{},"body":{"injectables/ScanEventContext.html":{}}}],["event.context.ts:81",{"_index":425,"title":{},"body":{"injectables/ScanEventContext.html":{}}}],["event.context.ts:91",{"_index":418,"title":{},"body":{"injectables/ScanEventContext.html":{}}}],["event.entity",{"_index":221,"title":{},"body":{"classes/CreateScanRequestDto.html":{},"classes/CreateScanResponseDto.html":{},"injectables/EventQueueProducer.html":{},"classes/FindOneScanResponseDto.html":{},"classes/FindingResponseDto.html":{},"classes/Location.html":{},"injectables/ScanEventContext.html":{},"injectables/ScanEventProcessor.html":{},"modules/ScansModule.html":{},"injectables/ScansService.html":{},"entities/Vulnerability.html":{}}}],["event.entity.ts",{"_index":366,"title":{},"body":{"entities/ScanEvent.html":{},"coverage.html":{}}}],["event.entity.ts:15",{"_index":382,"title":{},"body":{"entities/ScanEvent.html":{}}}],["event.entity.ts:21",{"_index":375,"title":{},"body":{"entities/ScanEvent.html":{}}}],["event.entity.ts:30",{"_index":379,"title":{},"body":{"entities/ScanEvent.html":{}}}],["event.entity.ts:36",{"_index":374,"title":{},"body":{"entities/ScanEvent.html":{}}}],["event.entity.ts:42",{"_index":372,"title":{},"body":{"entities/ScanEvent.html":{}}}],["event.entity.ts:48",{"_index":380,"title":{},"body":{"entities/ScanEvent.html":{}}}],["event.entity.ts:54",{"_index":371,"title":{},"body":{"entities/ScanEvent.html":{}}}],["event.entity.ts:60",{"_index":385,"title":{},"body":{"entities/ScanEvent.html":{}}}],["event.processor",{"_index":284,"title":{},"body":{"classes/EventQueueConsumer.html":{},"modules/WorkersModule.html":{}}}],["event.processor.ts",{"_index":439,"title":{},"body":{"injectables/ScanEventProcessor.html":{},"coverage.html":{}}}],["event.processor.ts:16",{"_index":445,"title":{},"body":{"injectables/ScanEventProcessor.html":{}}}],["event.processor.ts:36",{"_index":452,"title":{},"body":{"injectables/ScanEventProcessor.html":{}}}],["event.processor.ts:54",{"_index":455,"title":{},"body":{"injectables/ScanEventProcessor.html":{}}}],["event.processor.ts:71",{"_index":447,"title":{},"body":{"injectables/ScanEventProcessor.html":{}}}],["eventid",{"_index":264,"title":{},"body":{"interfaces/EventInterface.html":{},"injectables/EventQueueProducer.html":{}}}],["eventinterface",{"_index":259,"title":{"interfaces/EventInterface.html":{}},"body":{"interfaces/EventInterface.html":{},"injectables/EventQueueProducer.html":{},"coverage.html":{}}}],["eventqueue",{"_index":306,"title":{},"body":{"injectables/EventQueueProducer.html":{}}}],["eventqueueconsumer",{"_index":267,"title":{"classes/EventQueueConsumer.html":{}},"body":{"classes/EventQueueConsumer.html":{},"modules/EventQueueModule.html":{},"coverage.html":{}}}],["eventqueuemodule",{"_index":37,"title":{"modules/EventQueueModule.html":{}},"body":{"modules/AppModule.html":{},"modules/EventQueueModule.html":{},"modules/ScansModule.html":{},"modules.html":{},"overview.html":{}}}],["eventqueueproducer",{"_index":192,"title":{"injectables/EventQueueProducer.html":{}},"body":{"injectables/CacheWrapperService.html":{},"modules/EventQueueModule.html":{},"injectables/EventQueueProducer.html":{},"injectables/ScansService.html":{},"coverage.html":{},"overview.html":{}}}],["example",{"_index":777,"title":{},"body":{"miscellaneous/variables.html":{}}}],["executioncontext",{"_index":583,"title":{},"body":{"classes/ViewInterceptor.html":{}}}],["export",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/BaseSchema.html":{},"modules/CacheWrapperModule.html":{},"injectables/CacheWrapperService.html":{},"classes/CreateScanRequestDto.html":{},"classes/CreateScanResponseDto.html":{},"interfaces/EventInterface.html":{},"classes/EventQueueConsumer.html":{},"modules/EventQueueModule.html":{},"injectables/EventQueueProducer.html":{},"classes/FindOneScanResponseDto.html":{},"classes/FindingResponseDto.html":{},"classes/Location.html":{},"entities/ScanEvent.html":{},"injectables/ScanEventContext.html":{},"injectables/ScanEventProcessor.html":{},"controllers/ScansController.html":{},"modules/ScansModule.html":{},"injectables/ScansService.html":{},"classes/UtilsService.html":{},"classes/ViewInterceptor.html":{},"entities/Vulnerability.html":{},"modules/WorkersModule.html":{}}}],["exports",{"_index":132,"title":{},"body":{"modules/CacheWrapperModule.html":{},"modules/EventQueueModule.html":{},"modules/ScansModule.html":{},"modules/WorkersModule.html":{}}}],["exposed",{"_index":225,"title":{},"body":{"classes/CreateScanRequestDto.html":{},"classes/CreateScanResponseDto.html":{},"classes/FindOneScanResponseDto.html":{},"entities/ScanEvent.html":{}}}],["express",{"_index":661,"title":{},"body":{"dependencies.html":{}}}],["extend",{"_index":97,"title":{},"body":{"classes/BaseSchema.html":{}}}],["extends",{"_index":98,"title":{},"body":{"classes/BaseSchema.html":{},"classes/FindOneScanResponseDto.html":{},"classes/FindingResponseDto.html":{},"classes/Location.html":{},"entities/ScanEvent.html":{},"entities/Vulnerability.html":{}}}],["failed",{"_index":234,"title":{},"body":{"classes/CreateScanRequestDto.html":{},"classes/CreateScanResponseDto.html":{},"classes/FindOneScanResponseDto.html":{},"entities/ScanEvent.html":{},"injectables/ScanEventContext.html":{},"injectables/ScansService.html":{}}}],["failedat",{"_index":367,"title":{},"body":{"entities/ScanEvent.html":{},"injectables/ScanEventContext.html":{}}}],["false",{"_index":790,"title":{},"body":{"miscellaneous/variables.html":{}}}],["features",{"_index":696,"title":{},"body":{"index.html":{}}}],["fetch",{"_index":186,"title":{},"body":{"injectables/CacheWrapperService.html":{},"injectables/ScanEventContext.html":{},"controllers/ScansController.html":{},"injectables/ScansService.html":{}}}],["fields",{"_index":95,"title":{},"body":{"classes/BaseSchema.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/BaseSchema.html":{},"modules/CacheWrapperModule.html":{},"injectables/CacheWrapperService.html":{},"classes/CreateScanRequestDto.html":{},"classes/CreateScanResponseDto.html":{},"interfaces/EventInterface.html":{},"classes/EventQueueConsumer.html":{},"modules/EventQueueModule.html":{},"injectables/EventQueueProducer.html":{},"classes/FindOneScanResponseDto.html":{},"classes/FindingResponseDto.html":{},"classes/Location.html":{},"entities/ScanEvent.html":{},"injectables/ScanEventContext.html":{},"injectables/ScanEventProcessor.html":{},"controllers/ScansController.html":{},"modules/ScansModule.html":{},"injectables/ScansService.html":{},"classes/UtilsService.html":{},"classes/ViewInterceptor.html":{},"entities/Vulnerability.html":{},"modules/WorkersModule.html":{},"coverage.html":{},"index.html":{}}}],["findingresponsedto",{"_index":329,"title":{"classes/FindingResponseDto.html":{}},"body":{"classes/FindOneScanResponseDto.html":{},"classes/FindingResponseDto.html":{},"classes/Location.html":{},"coverage.html":{}}}],["findings",{"_index":327,"title":{},"body":{"classes/FindOneScanResponseDto.html":{},"classes/FindingResponseDto.html":{},"classes/Location.html":{}}}],["findone",{"_index":400,"title":{},"body":{"injectables/ScanEventContext.html":{},"controllers/ScansController.html":{},"injectables/ScansService.html":{},"miscellaneous/variables.html":{}}}],["findone(@param('id",{"_index":519,"title":{},"body":{"controllers/ScansController.html":{}}}],["findone(id",{"_index":493,"title":{},"body":{"controllers/ScansController.html":{},"injectables/ScansService.html":{}}}],["findone(uuid",{"_index":417,"title":{},"body":{"injectables/ScanEventContext.html":{}}}],["findonescanresponsedto",{"_index":324,"title":{"classes/FindOneScanResponseDto.html":{}},"body":{"classes/FindOneScanResponseDto.html":{},"classes/FindingResponseDto.html":{},"classes/Location.html":{},"controllers/ScansController.html":{},"coverage.html":{}}}],["first",{"_index":184,"title":{},"body":{"injectables/CacheWrapperService.html":{}}}],["fn",{"_index":181,"title":{},"body":{"injectables/CacheWrapperService.html":{}}}],["follow",{"_index":341,"title":{},"body":{"classes/FindOneScanResponseDto.html":{},"classes/FindingResponseDto.html":{},"classes/Location.html":{}}}],["format",{"_index":344,"title":{},"body":{"classes/FindOneScanResponseDto.html":{},"classes/FindingResponseDto.html":{},"classes/Location.html":{}}}],["forwardref",{"_index":457,"title":{},"body":{"injectables/ScanEventProcessor.html":{},"modules/ScansModule.html":{},"injectables/ScansService.html":{}}}],["found",{"_index":386,"title":{},"body":{"entities/ScanEvent.html":{},"entities/Vulnerability.html":{}}}],["framework",{"_index":691,"title":{},"body":{"index.html":{}}}],["function",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"injectables/CacheWrapperService.html":{},"injectables/ScanEventProcessor.html":{},"coverage.html":{}}}],["functions",{"_index":683,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generate",{"_index":554,"title":{},"body":{"classes/UtilsService.html":{},"index.html":{}}}],["generated",{"_index":108,"title":{},"body":{"classes/BaseSchema.html":{},"classes/CreateScanRequestDto.html":{},"classes/CreateScanResponseDto.html":{},"classes/FindOneScanResponseDto.html":{},"entities/ScanEvent.html":{},"index.html":{}}}],["get(':id",{"_index":515,"title":{},"body":{"controllers/ScansController.html":{}}}],["get(':id')@view(findonescanresponsedto)@apiextramodels(findonescanresponsedto)@baseapiresponse(findonescanresponsedto",{"_index":494,"title":{},"body":{"controllers/ScansController.html":{}}}],["get('https://names.drycodes.com/10?nameoptions=funnywords",{"_index":481,"title":{},"body":{"injectables/ScanEventProcessor.html":{}}}],["get(key",{"_index":163,"title":{},"body":{"injectables/CacheWrapperService.html":{}}}],["getinstance",{"_index":545,"title":{},"body":{"classes/UtilsService.html":{}}}],["getschemapath(model",{"_index":780,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getting",{"_index":686,"title":{"index.html":{}},"body":{}}],["handle",{"_index":574,"title":{},"body":{"classes/ViewInterceptor.html":{}}}],["handler",{"_index":589,"title":{},"body":{"classes/ViewInterceptor.html":{}}}],["happen",{"_index":123,"title":{},"body":{"classes/BaseSchema.html":{},"classes/CreateScanRequestDto.html":{},"classes/CreateScanResponseDto.html":{},"classes/FindOneScanResponseDto.html":{}}}],["health",{"_index":16,"title":{},"body":{"controllers/AppController.html":{}}}],["healthcheck",{"_index":11,"title":{},"body":{"controllers/AppController.html":{}}}],["host",{"_index":66,"title":{},"body":{"modules/AppModule.html":{},"modules/CacheWrapperModule.html":{},"miscellaneous/variables.html":{}}}],["http",{"_index":446,"title":{},"body":{"injectables/ScanEventProcessor.html":{}}}],["http://127.0.0.1:3000/api",{"_index":733,"title":{},"body":{"index.html":{}}}],["http://127.0.0.1:8080",{"_index":737,"title":{},"body":{"index.html":{}}}],["httpmodule",{"_index":618,"title":{},"body":{"modules/WorkersModule.html":{}}}],["httpservice",{"_index":444,"title":{},"body":{"injectables/ScanEventProcessor.html":{}}}],["id",{"_index":102,"title":{},"body":{"classes/BaseSchema.html":{},"classes/CreateScanRequestDto.html":{},"classes/CreateScanResponseDto.html":{},"classes/FindOneScanResponseDto.html":{},"entities/ScanEvent.html":{},"injectables/ScanEventContext.html":{},"controllers/ScansController.html":{},"injectables/ScansService.html":{}}}],["identifier",{"_index":621,"title":{},"body":{"coverage.html":{}}}],["image",{"_index":708,"title":{},"body":{"index.html":{}}}],["implements",{"_index":575,"title":{},"body":{"classes/ViewInterceptor.html":{}}}],["import",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/BaseSchema.html":{},"modules/CacheWrapperModule.html":{},"injectables/CacheWrapperService.html":{},"classes/CreateScanRequestDto.html":{},"classes/CreateScanResponseDto.html":{},"classes/EventQueueConsumer.html":{},"modules/EventQueueModule.html":{},"injectables/EventQueueProducer.html":{},"classes/FindOneScanResponseDto.html":{},"classes/FindingResponseDto.html":{},"classes/Location.html":{},"entities/ScanEvent.html":{},"injectables/ScanEventContext.html":{},"injectables/ScanEventProcessor.html":{},"controllers/ScansController.html":{},"modules/ScansModule.html":{},"injectables/ScansService.html":{},"classes/ViewInterceptor.html":{},"entities/Vulnerability.html":{},"modules/WorkersModule.html":{}}}],["imports",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"modules/CacheWrapperModule.html":{},"modules/EventQueueModule.html":{},"modules/ScansModule.html":{},"modules/WorkersModule.html":{}}}],["increase",{"_index":118,"title":{},"body":{"classes/BaseSchema.html":{},"classes/CreateScanRequestDto.html":{},"classes/CreateScanResponseDto.html":{},"classes/FindOneScanResponseDto.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"classes/BaseSchema.html":{},"injectables/CacheWrapperService.html":{},"classes/CreateScanRequestDto.html":{},"classes/CreateScanResponseDto.html":{},"interfaces/EventInterface.html":{},"classes/EventQueueConsumer.html":{},"injectables/EventQueueProducer.html":{},"classes/FindOneScanResponseDto.html":{},"classes/FindingResponseDto.html":{},"classes/Location.html":{},"entities/ScanEvent.html":{},"injectables/ScanEventContext.html":{},"injectables/ScanEventProcessor.html":{},"controllers/ScansController.html":{},"injectables/ScansService.html":{},"classes/UtilsService.html":{},"classes/ViewInterceptor.html":{},"entities/Vulnerability.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["index()@column({generated",{"_index":381,"title":{},"body":{"entities/ScanEvent.html":{}}}],["index()@manytoone(undefined",{"_index":609,"title":{},"body":{"entities/Vulnerability.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/BaseSchema.html":{},"modules/CacheWrapperModule.html":{},"injectables/CacheWrapperService.html":{},"classes/CreateScanRequestDto.html":{},"classes/CreateScanResponseDto.html":{},"interfaces/EventInterface.html":{},"classes/EventQueueConsumer.html":{},"modules/EventQueueModule.html":{},"injectables/EventQueueProducer.html":{},"classes/FindOneScanResponseDto.html":{},"classes/FindingResponseDto.html":{},"classes/Location.html":{},"entities/ScanEvent.html":{},"injectables/ScanEventContext.html":{},"injectables/ScanEventProcessor.html":{},"controllers/ScansController.html":{},"modules/ScansModule.html":{},"injectables/ScansService.html":{},"classes/UtilsService.html":{},"classes/ViewInterceptor.html":{},"entities/Vulnerability.html":{},"modules/WorkersModule.html":{}}}],["inherited",{"_index":331,"title":{},"body":{"classes/FindOneScanResponseDto.html":{}}}],["inject",{"_index":81,"title":{},"body":{"modules/AppModule.html":{},"modules/CacheWrapperModule.html":{},"injectables/CacheWrapperService.html":{},"injectables/ScanEventProcessor.html":{},"injectables/ScansService.html":{}}}],["inject(forwardref",{"_index":465,"title":{},"body":{"injectables/ScanEventProcessor.html":{},"injectables/ScansService.html":{}}}],["injectable",{"_index":142,"title":{"injectables/CacheWrapperService.html":{},"injectables/EventQueueProducer.html":{},"injectables/ScanEventContext.html":{},"injectables/ScanEventProcessor.html":{},"injectables/ScansService.html":{}},"body":{"injectables/CacheWrapperService.html":{},"injectables/EventQueueProducer.html":{},"injectables/ScanEventContext.html":{},"injectables/ScanEventProcessor.html":{},"injectables/ScansService.html":{},"coverage.html":{}}}],["injectables",{"_index":143,"title":{},"body":{"injectables/CacheWrapperService.html":{},"injectables/EventQueueProducer.html":{},"injectables/ScanEventContext.html":{},"injectables/ScanEventProcessor.html":{},"injectables/ScansService.html":{},"overview.html":{}}}],["injectqueue",{"_index":314,"title":{},"body":{"injectables/EventQueueProducer.html":{}}}],["injectrepository",{"_index":426,"title":{},"body":{"injectables/ScanEventContext.html":{}}}],["injectrepository(scanevent",{"_index":429,"title":{},"body":{"injectables/ScanEventContext.html":{}}}],["injectrepository(vulnerability",{"_index":430,"title":{},"body":{"injectables/ScanEventContext.html":{}}}],["input",{"_index":414,"title":{},"body":{"injectables/ScanEventContext.html":{},"classes/UtilsService.html":{}}}],["inseconds",{"_index":564,"title":{},"body":{"classes/UtilsService.html":{}}}],["insert",{"_index":109,"title":{},"body":{"classes/BaseSchema.html":{},"classes/CreateScanRequestDto.html":{},"classes/CreateScanResponseDto.html":{},"classes/FindOneScanResponseDto.html":{}}}],["install",{"_index":706,"title":{},"body":{"index.html":{}}}],["installation",{"_index":705,"title":{},"body":{"index.html":{}}}],["instance",{"_index":544,"title":{},"body":{"classes/UtilsService.html":{}}}],["instancetoplain",{"_index":592,"title":{},"body":{"classes/ViewInterceptor.html":{}}}],["instancetoplain(viewinstance",{"_index":605,"title":{},"body":{"classes/ViewInterceptor.html":{}}}],["intercept",{"_index":577,"title":{},"body":{"classes/ViewInterceptor.html":{}}}],["intercept(context",{"_index":582,"title":{},"body":{"classes/ViewInterceptor.html":{}}}],["interceptor",{"_index":573,"title":{},"body":{"classes/ViewInterceptor.html":{}}}],["interface",{"_index":258,"title":{"interfaces/EventInterface.html":{}},"body":{"interfaces/EventInterface.html":{},"coverage.html":{},"overview.html":{}}}],["interfaces",{"_index":260,"title":{},"body":{"interfaces/EventInterface.html":{}}}],["interfaces/event.interface",{"_index":315,"title":{},"body":{"injectables/EventQueueProducer.html":{}}}],["isglobal",{"_index":141,"title":{},"body":{"modules/CacheWrapperModule.html":{}}}],["isnotempty",{"_index":216,"title":{},"body":{"classes/CreateScanRequestDto.html":{},"classes/CreateScanResponseDto.html":{}}}],["isstring",{"_index":217,"title":{},"body":{"classes/CreateScanRequestDto.html":{},"classes/CreateScanResponseDto.html":{}}}],["isstring()@isnotempty()@apiproperty",{"_index":211,"title":{},"body":{"classes/CreateScanRequestDto.html":{}}}],["jest.fn",{"_index":783,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jest.fn((entity",{"_index":799,"title":{},"body":{"miscellaneous/variables.html":{}}}],["job",{"_index":277,"title":{},"body":{"classes/EventQueueConsumer.html":{},"injectables/EventQueueProducer.html":{},"index.html":{}}}],["json",{"_index":492,"title":{},"body":{"controllers/ScansController.html":{}}}],["key",{"_index":116,"title":{},"body":{"classes/BaseSchema.html":{},"injectables/CacheWrapperService.html":{},"classes/CreateScanRequestDto.html":{},"classes/CreateScanResponseDto.html":{},"classes/FindOneScanResponseDto.html":{}}}],["lastvaluefrom",{"_index":459,"title":{},"body":{"injectables/ScanEventProcessor.html":{}}}],["license",{"_index":758,"title":{},"body":{"properties.html":{}}}],["life",{"_index":693,"title":{},"body":{"index.html":{}}}],["line",{"_index":353,"title":{},"body":{"classes/FindOneScanResponseDto.html":{},"classes/FindingResponseDto.html":{},"classes/Location.html":{},"entities/Vulnerability.html":{}}}],["list",{"_index":343,"title":{},"body":{"classes/FindOneScanResponseDto.html":{},"classes/FindingResponseDto.html":{},"classes/Location.html":{}}}],["literal",{"_index":363,"title":{},"body":{"classes/Location.html":{}}}],["live",{"_index":178,"title":{},"body":{"injectables/CacheWrapperService.html":{}}}],["load",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["local",{"_index":721,"title":{},"body":{"index.html":{}}}],["location",{"_index":348,"title":{"classes/Location.html":{}},"body":{"classes/FindOneScanResponseDto.html":{},"classes/FindingResponseDto.html":{},"classes/Location.html":{},"coverage.html":{}}}],["logging",{"_index":791,"title":{},"body":{"miscellaneous/variables.html":{}}}],["long",{"_index":797,"title":{},"body":{"miscellaneous/variables.html":{}}}],["longttl",{"_index":534,"title":{},"body":{"injectables/ScansService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["mac",{"_index":704,"title":{},"body":{"index.html":{}}}],["manager",{"_index":137,"title":{},"body":{"modules/CacheWrapperModule.html":{},"injectables/CacheWrapperService.html":{},"dependencies.html":{}}}],["mananger",{"_index":158,"title":{},"body":{"injectables/CacheWrapperService.html":{}}}],["manytoone",{"_index":612,"title":{},"body":{"entities/Vulnerability.html":{}}}],["map",{"_index":460,"title":{},"body":{"injectables/ScanEventProcessor.html":{},"classes/ViewInterceptor.html":{}}}],["map((data",{"_index":599,"title":{},"body":{"classes/ViewInterceptor.html":{}}}],["markasfailedevent",{"_index":401,"title":{},"body":{"injectables/ScanEventContext.html":{}}}],["markasfailedevent(event",{"_index":420,"title":{},"body":{"injectables/ScanEventContext.html":{}}}],["matching",{"_index":29,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/BaseSchema.html":{},"modules/CacheWrapperModule.html":{},"injectables/CacheWrapperService.html":{},"classes/CreateScanRequestDto.html":{},"classes/CreateScanResponseDto.html":{},"interfaces/EventInterface.html":{},"classes/EventQueueConsumer.html":{},"modules/EventQueueModule.html":{},"injectables/EventQueueProducer.html":{},"classes/FindOneScanResponseDto.html":{},"classes/FindingResponseDto.html":{},"classes/Location.html":{},"entities/ScanEvent.html":{},"injectables/ScanEventContext.html":{},"injectables/ScanEventProcessor.html":{},"controllers/ScansController.html":{},"modules/ScansModule.html":{},"injectables/ScansService.html":{},"classes/UtilsService.html":{},"classes/ViewInterceptor.html":{},"entities/Vulnerability.html":{},"modules/WorkersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["math.floor(math.random",{"_index":567,"title":{},"body":{"classes/UtilsService.html":{}}}],["max",{"_index":555,"title":{},"body":{"classes/UtilsService.html":{}}}],["maxnumber",{"_index":556,"title":{},"body":{"classes/UtilsService.html":{}}}],["message",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"controllers/ScansController.html":{},"modules/ScansModule.html":{},"injectables/ScansService.html":{},"classes/ViewInterceptor.html":{},"miscellaneous/variables.html":{}}}],["metadata",{"_index":673,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"injectables/CacheWrapperService.html":{},"classes/EventQueueConsumer.html":{},"injectables/EventQueueProducer.html":{},"classes/FindOneScanResponseDto.html":{},"injectables/ScanEventContext.html":{},"injectables/ScanEventProcessor.html":{},"controllers/ScansController.html":{},"injectables/ScansService.html":{},"classes/UtilsService.html":{},"classes/ViewInterceptor.html":{}}}],["migrations",{"_index":792,"title":{},"body":{"miscellaneous/variables.html":{}}}],["millisecond",{"_index":179,"title":{},"body":{"injectables/CacheWrapperService.html":{}}}],["miscellaneous",{"_index":682,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mock",{"_index":784,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mocktype",{"_index":763,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mode",{"_index":725,"title":{},"body":{"index.html":{}}}],["model",{"_index":773,"title":{},"body":{"miscellaneous/variables.html":{}}}],["module",{"_index":30,"title":{"modules/AppModule.html":{},"modules/CacheWrapperModule.html":{},"modules/EventQueueModule.html":{},"modules/ScansModule.html":{},"modules/WorkersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CacheWrapperModule.html":{},"modules/EventQueueModule.html":{},"modules/ScansModule.html":{},"modules/WorkersModule.html":{}}}],["modules",{"_index":32,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/CacheWrapperModule.html":{},"modules/EventQueueModule.html":{},"modules/ScansModule.html":{},"modules/WorkersModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/scans/contexts/scan",{"_index":463,"title":{},"body":{"injectables/ScanEventProcessor.html":{}}}],["modules/scans/entities/scan",{"_index":316,"title":{},"body":{"injectables/EventQueueProducer.html":{},"injectables/ScanEventProcessor.html":{}}}],["modules/scans/scans.module",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"modules/WorkersModule.html":{}}}],["name",{"_index":155,"title":{},"body":{"injectables/CacheWrapperService.html":{},"classes/CreateScanRequestDto.html":{},"classes/CreateScanResponseDto.html":{},"classes/EventQueueConsumer.html":{},"modules/EventQueueModule.html":{},"injectables/EventQueueProducer.html":{},"classes/FindOneScanResponseDto.html":{},"entities/ScanEvent.html":{},"injectables/ScanEventContext.html":{},"injectables/ScanEventProcessor.html":{},"controllers/ScansController.html":{},"injectables/ScansService.html":{},"classes/UtilsService.html":{},"classes/ViewInterceptor.html":{},"entities/Vulnerability.html":{}}}],["names",{"_index":450,"title":{},"body":{"injectables/ScanEventProcessor.html":{}}}],["need",{"_index":188,"title":{},"body":{"injectables/CacheWrapperService.html":{}}}],["nest",{"_index":581,"title":{},"body":{"classes/ViewInterceptor.html":{}}}],["nestinterceptor",{"_index":576,"title":{},"body":{"classes/ViewInterceptor.html":{}}}],["nestjs",{"_index":690,"title":{},"body":{"index.html":{}}}],["nestjs/axios",{"_index":458,"title":{},"body":{"injectables/ScanEventProcessor.html":{},"modules/WorkersModule.html":{},"dependencies.html":{}}}],["nestjs/bull",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"classes/EventQueueConsumer.html":{},"modules/EventQueueModule.html":{},"injectables/EventQueueProducer.html":{},"dependencies.html":{}}}],["nestjs/cli",{"_index":655,"title":{},"body":{"dependencies.html":{}}}],["nestjs/common",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/CacheWrapperModule.html":{},"injectables/CacheWrapperService.html":{},"modules/EventQueueModule.html":{},"injectables/EventQueueProducer.html":{},"injectables/ScanEventContext.html":{},"injectables/ScanEventProcessor.html":{},"controllers/ScansController.html":{},"modules/ScansModule.html":{},"injectables/ScansService.html":{},"classes/ViewInterceptor.html":{},"modules/WorkersModule.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"modules/CacheWrapperModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":591,"title":{},"body":{"classes/ViewInterceptor.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":658,"title":{},"body":{"dependencies.html":{}}}],["nestjs/platform",{"_index":660,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":215,"title":{},"body":{"classes/CreateScanRequestDto.html":{},"classes/CreateScanResponseDto.html":{},"classes/FindOneScanResponseDto.html":{},"classes/FindingResponseDto.html":{},"classes/Location.html":{},"controllers/ScansController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"injectables/ScanEventContext.html":{},"modules/ScansModule.html":{},"dependencies.html":{}}}],["nestjsdocumentation",{"_index":732,"title":{},"body":{"index.html":{}}}],["new",{"_index":110,"title":{},"body":{"classes/BaseSchema.html":{},"classes/CreateScanRequestDto.html":{},"classes/CreateScanResponseDto.html":{},"classes/FindOneScanResponseDto.html":{},"injectables/ScanEventContext.html":{},"classes/UtilsService.html":{},"classes/ViewInterceptor.html":{},"coverage.html":{}}}],["next",{"_index":584,"title":{},"body":{"classes/ViewInterceptor.html":{}}}],["next.handle",{"_index":597,"title":{},"body":{"classes/ViewInterceptor.html":{}}}],["next.handle().pipe",{"_index":598,"title":{},"body":{"classes/ViewInterceptor.html":{}}}],["nodejs",{"_index":700,"title":{},"body":{"index.html":{}}}],["npm",{"_index":707,"title":{},"body":{"index.html":{}}}],["null",{"_index":168,"title":{},"body":{"injectables/CacheWrapperService.html":{}}}],["nullable",{"_index":393,"title":{},"body":{"entities/ScanEvent.html":{}}}],["number",{"_index":112,"title":{},"body":{"classes/BaseSchema.html":{},"injectables/CacheWrapperService.html":{},"classes/CreateScanRequestDto.html":{},"classes/CreateScanResponseDto.html":{},"classes/FindOneScanResponseDto.html":{},"injectables/ScanEventProcessor.html":{},"classes/UtilsService.html":{},"entities/Vulnerability.html":{},"miscellaneous/variables.html":{}}}],["object",{"_index":782,"title":{},"body":{"miscellaneous/variables.html":{}}}],["observable",{"_index":590,"title":{},"body":{"classes/ViewInterceptor.html":{}}}],["onetomany",{"_index":387,"title":{},"body":{"entities/ScanEvent.html":{}}}],["onetomany(undefined",{"_index":383,"title":{},"body":{"entities/ScanEvent.html":{}}}],["open",{"_index":736,"title":{},"body":{"index.html":{}}}],["optional",{"_index":156,"title":{},"body":{"injectables/CacheWrapperService.html":{},"classes/CreateScanResponseDto.html":{},"classes/EventQueueConsumer.html":{},"injectables/EventQueueProducer.html":{},"classes/FindOneScanResponseDto.html":{},"entities/ScanEvent.html":{},"injectables/ScanEventContext.html":{},"injectables/ScanEventProcessor.html":{},"controllers/ScansController.html":{},"injectables/ScansService.html":{},"classes/UtilsService.html":{},"classes/ViewInterceptor.html":{}}}],["out",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"modules/CacheWrapperModule.html":{},"modules/EventQueueModule.html":{},"modules/ScansModule.html":{},"modules/WorkersModule.html":{},"overview.html":{}}}],["overview",{"_index":752,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":650,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":191,"title":{},"body":{"injectables/CacheWrapperService.html":{},"classes/CreateScanRequestDto.html":{},"classes/CreateScanResponseDto.html":{},"classes/EventQueueConsumer.html":{},"injectables/EventQueueProducer.html":{},"classes/FindOneScanResponseDto.html":{},"classes/FindingResponseDto.html":{},"classes/Location.html":{},"injectables/ScanEventContext.html":{},"injectables/ScanEventProcessor.html":{},"controllers/ScansController.html":{},"injectables/ScansService.html":{},"classes/UtilsService.html":{},"classes/ViewInterceptor.html":{}}}],["parameters",{"_index":154,"title":{},"body":{"injectables/CacheWrapperService.html":{},"classes/CreateScanResponseDto.html":{},"classes/EventQueueConsumer.html":{},"injectables/EventQueueProducer.html":{},"classes/FindOneScanResponseDto.html":{},"injectables/ScanEventContext.html":{},"injectables/ScanEventProcessor.html":{},"controllers/ScansController.html":{},"injectables/ScansService.html":{},"classes/UtilsService.html":{},"classes/ViewInterceptor.html":{}}}],["pass",{"_index":281,"title":{},"body":{"classes/EventQueueConsumer.html":{}}}],["password",{"_index":72,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["path",{"_index":349,"title":{},"body":{"classes/FindOneScanResponseDto.html":{},"classes/FindingResponseDto.html":{},"classes/Location.html":{},"injectables/ScanEventProcessor.html":{},"entities/Vulnerability.html":{}}}],["pg",{"_index":670,"title":{},"body":{"dependencies.html":{}}}],["pipe(map((data",{"_index":482,"title":{},"body":{"injectables/ScanEventProcessor.html":{}}}],["poolsize",{"_index":76,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["port",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"modules/CacheWrapperModule.html":{},"miscellaneous/variables.html":{}}}],["position",{"_index":350,"title":{},"body":{"classes/FindOneScanResponseDto.html":{},"classes/FindingResponseDto.html":{},"classes/Location.html":{}}}],["positions",{"_index":351,"title":{},"body":{"classes/FindOneScanResponseDto.html":{},"classes/FindingResponseDto.html":{},"classes/Location.html":{}}}],["post",{"_index":497,"title":{},"body":{"controllers/ScansController.html":{},"index.html":{}}}],["post()@view(createscanresponsedto)@apiextramodels(createscanresponsedto)@baseapiresponse(createscanresponsedto",{"_index":489,"title":{},"body":{"controllers/ScansController.html":{}}}],["postgis14",{"_index":713,"title":{},"body":{"index.html":{}}}],["postgres",{"_index":65,"title":{},"body":{"modules/AppModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["prefer",{"_index":701,"title":{},"body":{"index.html":{}}}],["prefix",{"_index":487,"title":{},"body":{"controllers/ScansController.html":{}}}],["primary",{"_index":115,"title":{},"body":{"classes/BaseSchema.html":{},"classes/CreateScanRequestDto.html":{},"classes/CreateScanResponseDto.html":{},"classes/FindOneScanResponseDto.html":{}}}],["primarygeneratedcolumn",{"_index":113,"title":{},"body":{"classes/BaseSchema.html":{}}}],["private",{"_index":196,"title":{},"body":{"injectables/CacheWrapperService.html":{},"injectables/EventQueueProducer.html":{},"classes/FindOneScanResponseDto.html":{},"classes/FindingResponseDto.html":{},"classes/Location.html":{},"injectables/ScanEventContext.html":{},"injectables/ScanEventProcessor.html":{},"injectables/ScansService.html":{},"classes/UtilsService.html":{}}}],["proceed",{"_index":440,"title":{},"body":{"injectables/ScanEventProcessor.html":{}}}],["process",{"_index":278,"title":{},"body":{"classes/EventQueueConsumer.html":{},"injectables/ScanEventProcessor.html":{},"classes/UtilsService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["process(event",{"_index":451,"title":{},"body":{"injectables/ScanEventProcessor.html":{}}}],["process.env.database_host",{"_index":785,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.database_pool_size",{"_index":789,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.database_port",{"_index":786,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.postgres_password",{"_index":788,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.postgres_user",{"_index":787,"title":{},"body":{"miscellaneous/variables.html":{}}}],["processedat",{"_index":368,"title":{},"body":{"entities/ScanEvent.html":{},"injectables/ScanEventContext.html":{}}}],["processevent",{"_index":402,"title":{},"body":{"injectables/ScanEventContext.html":{}}}],["processevent(event",{"_index":422,"title":{},"body":{"injectables/ScanEventContext.html":{}}}],["processing",{"_index":233,"title":{},"body":{"classes/CreateScanRequestDto.html":{},"classes/CreateScanResponseDto.html":{},"classes/FindOneScanResponseDto.html":{},"entities/ScanEvent.html":{},"injectables/ScanEventContext.html":{},"controllers/ScansController.html":{}}}],["processor",{"_index":275,"title":{},"body":{"classes/EventQueueConsumer.html":{},"injectables/ScanEventProcessor.html":{}}}],["processor('scan_event",{"_index":285,"title":{},"body":{"classes/EventQueueConsumer.html":{}}}],["producer",{"_index":194,"title":{},"body":{"injectables/CacheWrapperService.html":{},"injectables/EventQueueProducer.html":{},"injectables/ScansService.html":{}}}],["production",{"_index":727,"title":{},"body":{"index.html":{}}}],["promise",{"_index":162,"title":{},"body":{"injectables/CacheWrapperService.html":{},"injectables/ScanEventContext.html":{},"injectables/ScanEventProcessor.html":{},"classes/UtilsService.html":{}}}],["promise((resolve",{"_index":569,"title":{},"body":{"classes/UtilsService.html":{}}}],["properties",{"_index":100,"title":{"properties.html":{}},"body":{"classes/BaseSchema.html":{},"classes/CreateScanRequestDto.html":{},"classes/CreateScanResponseDto.html":{},"interfaces/EventInterface.html":{},"classes/FindOneScanResponseDto.html":{},"classes/FindingResponseDto.html":{},"classes/Location.html":{},"entities/ScanEvent.html":{},"injectables/ScanEventProcessor.html":{},"classes/UtilsService.html":{},"entities/Vulnerability.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["providers",{"_index":86,"title":{},"body":{"modules/AppModule.html":{},"modules/CacheWrapperModule.html":{},"modules/EventQueueModule.html":{},"modules/ScansModule.html":{},"modules/WorkersModule.html":{}}}],["public",{"_index":565,"title":{},"body":{"classes/UtilsService.html":{}}}],["query",{"_index":741,"title":{},"body":{"index.html":{}}}],["queue",{"_index":228,"title":{},"body":{"classes/CreateScanRequestDto.html":{},"classes/CreateScanResponseDto.html":{},"interfaces/EventInterface.html":{},"classes/EventQueueConsumer.html":{},"injectables/EventQueueProducer.html":{},"classes/FindOneScanResponseDto.html":{},"entities/ScanEvent.html":{},"injectables/ScanEventProcessor.html":{},"miscellaneous/variables.html":{}}}],["queue.consumer",{"_index":297,"title":{},"body":{"modules/EventQueueModule.html":{}}}],["queue.consumer.ts",{"_index":268,"title":{},"body":{"classes/EventQueueConsumer.html":{},"coverage.html":{}}}],["queue.consumer.ts:24",{"_index":279,"title":{},"body":{"classes/EventQueueConsumer.html":{}}}],["queue.consumer.ts:9",{"_index":273,"title":{},"body":{"classes/EventQueueConsumer.html":{}}}],["queue.module",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"modules/ScansModule.html":{}}}],["queue.module.ts",{"_index":295,"title":{},"body":{"modules/EventQueueModule.html":{}}}],["queue.producer",{"_index":298,"title":{},"body":{"modules/EventQueueModule.html":{},"injectables/ScansService.html":{}}}],["queue.producer.ts",{"_index":301,"title":{},"body":{"injectables/EventQueueProducer.html":{},"coverage.html":{}}}],["queue.producer.ts:11",{"_index":305,"title":{},"body":{"injectables/EventQueueProducer.html":{}}}],["queue.producer.ts:25",{"_index":308,"title":{},"body":{"injectables/EventQueueProducer.html":{}}}],["queue.producer.ts:36",{"_index":310,"title":{},"body":{"injectables/EventQueueProducer.html":{}}}],["queue/event",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"classes/EventQueueConsumer.html":{},"modules/EventQueueModule.html":{},"injectables/EventQueueProducer.html":{},"modules/ScansModule.html":{},"injectables/ScansService.html":{},"coverage.html":{}}}],["queue/interfaces/event.interface.ts",{"_index":262,"title":{},"body":{"interfaces/EventInterface.html":{},"coverage.html":{}}}],["queued",{"_index":232,"title":{},"body":{"classes/CreateScanRequestDto.html":{},"classes/CreateScanResponseDto.html":{},"classes/FindOneScanResponseDto.html":{},"entities/ScanEvent.html":{},"injectables/ScanEventContext.html":{}}}],["queuedat",{"_index":235,"title":{},"body":{"classes/CreateScanRequestDto.html":{},"classes/CreateScanResponseDto.html":{},"classes/FindOneScanResponseDto.html":{},"entities/ScanEvent.html":{},"injectables/ScanEventContext.html":{}}}],["queuemock",{"_index":642,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["random",{"_index":449,"title":{},"body":{"injectables/ScanEventProcessor.html":{},"classes/UtilsService.html":{}}}],["randominteger",{"_index":546,"title":{},"body":{"classes/UtilsService.html":{}}}],["randominteger(maxnumber",{"_index":552,"title":{},"body":{"classes/UtilsService.html":{}}}],["randomsleep",{"_index":547,"title":{},"body":{"classes/UtilsService.html":{}}}],["randomsleep(inseconds",{"_index":558,"title":{},"body":{"classes/UtilsService.html":{}}}],["range",{"_index":557,"title":{},"body":{"classes/UtilsService.html":{}}}],["raw",{"_index":312,"title":{},"body":{"injectables/EventQueueProducer.html":{}}}],["readonly",{"_index":287,"title":{},"body":{"classes/EventQueueConsumer.html":{},"injectables/ScanEventProcessor.html":{},"controllers/ScansController.html":{},"injectables/ScansService.html":{}}}],["real",{"_index":692,"title":{},"body":{"index.html":{}}}],["record",{"_index":111,"title":{},"body":{"classes/BaseSchema.html":{},"classes/CreateScanRequestDto.html":{},"classes/CreateScanResponseDto.html":{},"classes/FindOneScanResponseDto.html":{},"injectables/ScanEventContext.html":{}}}],["redis",{"_index":83,"title":{},"body":{"modules/AppModule.html":{},"modules/CacheWrapperModule.html":{},"dependencies.html":{},"index.html":{}}}],["redisclientoptions",{"_index":134,"title":{},"body":{"modules/CacheWrapperModule.html":{}}}],["redisrunning",{"_index":714,"title":{},"body":{"index.html":{}}}],["redisstore",{"_index":135,"title":{},"body":{"modules/CacheWrapperModule.html":{}}}],["ref",{"_index":779,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reflect",{"_index":672,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":579,"title":{},"body":{"classes/ViewInterceptor.html":{}}}],["related",{"_index":419,"title":{},"body":{"injectables/ScanEventContext.html":{}}}],["relations",{"_index":436,"title":{},"body":{"injectables/ScanEventContext.html":{}}}],["removeoncomplete",{"_index":321,"title":{},"body":{"injectables/EventQueueProducer.html":{}}}],["report/index.html",{"_index":745,"title":{},"body":{"index.html":{}}}],["repository",{"_index":213,"title":{},"body":{"classes/CreateScanRequestDto.html":{},"classes/CreateScanResponseDto.html":{},"entities/ScanEvent.html":{},"injectables/ScanEventContext.html":{},"injectables/ScanEventProcessor.html":{},"controllers/ScansController.html":{},"injectables/ScansService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["repositorymockfactory",{"_index":644,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["repsositoryname",{"_index":210,"title":{},"body":{"classes/CreateScanRequestDto.html":{},"classes/CreateScanResponseDto.html":{},"interfaces/EventInterface.html":{},"injectables/EventQueueProducer.html":{},"classes/FindOneScanResponseDto.html":{},"entities/ScanEvent.html":{}}}],["request",{"_index":208,"title":{},"body":{"classes/CreateScanRequestDto.html":{},"classes/CreateScanResponseDto.html":{},"classes/ViewInterceptor.html":{}}}],["requirements",{"_index":699,"title":{},"body":{"index.html":{}}}],["reset",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"modules/CacheWrapperModule.html":{},"injectables/CacheWrapperService.html":{},"modules/EventQueueModule.html":{},"modules/ScansModule.html":{},"modules/WorkersModule.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["response",{"_index":222,"title":{},"body":{"classes/CreateScanRequestDto.html":{},"classes/CreateScanResponseDto.html":{},"classes/FindOneScanResponseDto.html":{},"classes/FindingResponseDto.html":{},"classes/Location.html":{},"classes/ViewInterceptor.html":{},"miscellaneous/variables.html":{}}}],["response.decorator",{"_index":506,"title":{},"body":{"controllers/ScansController.html":{}}}],["response.decorator.ts",{"_index":631,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["respository",{"_index":230,"title":{},"body":{"classes/CreateScanRequestDto.html":{},"classes/CreateScanResponseDto.html":{},"interfaces/EventInterface.html":{},"classes/FindOneScanResponseDto.html":{},"entities/ScanEvent.html":{}}}],["result",{"_index":326,"title":{},"body":{"classes/FindOneScanResponseDto.html":{},"classes/FindingResponseDto.html":{},"classes/Location.html":{},"injectables/ScanEventProcessor.html":{},"controllers/ScansController.html":{},"index.html":{}}}],["results",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/BaseSchema.html":{},"modules/CacheWrapperModule.html":{},"injectables/CacheWrapperService.html":{},"classes/CreateScanRequestDto.html":{},"classes/CreateScanResponseDto.html":{},"interfaces/EventInterface.html":{},"classes/EventQueueConsumer.html":{},"modules/EventQueueModule.html":{},"injectables/EventQueueProducer.html":{},"classes/FindOneScanResponseDto.html":{},"classes/FindingResponseDto.html":{},"classes/Location.html":{},"entities/ScanEvent.html":{},"injectables/ScanEventContext.html":{},"injectables/ScanEventProcessor.html":{},"controllers/ScansController.html":{},"modules/ScansModule.html":{},"injectables/ScansService.html":{},"classes/UtilsService.html":{},"classes/ViewInterceptor.html":{},"entities/Vulnerability.html":{},"modules/WorkersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retrieve",{"_index":226,"title":{},"body":{"classes/CreateScanRequestDto.html":{},"classes/CreateScanResponseDto.html":{},"classes/FindOneScanResponseDto.html":{},"entities/ScanEvent.html":{}}}],["return",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/CacheWrapperModule.html":{},"injectables/CacheWrapperService.html":{},"classes/EventQueueConsumer.html":{},"injectables/EventQueueProducer.html":{},"classes/FindOneScanResponseDto.html":{},"classes/FindingResponseDto.html":{},"classes/Location.html":{},"injectables/ScanEventContext.html":{},"injectables/ScanEventProcessor.html":{},"controllers/ScansController.html":{},"injectables/ScansService.html":{},"classes/UtilsService.html":{},"classes/ViewInterceptor.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"injectables/CacheWrapperService.html":{},"classes/EventQueueConsumer.html":{},"injectables/EventQueueProducer.html":{},"classes/FindOneScanResponseDto.html":{},"classes/FindingResponseDto.html":{},"classes/Location.html":{},"injectables/ScanEventContext.html":{},"injectables/ScanEventProcessor.html":{},"controllers/ScansController.html":{},"injectables/ScansService.html":{},"classes/UtilsService.html":{},"classes/ViewInterceptor.html":{}}}],["rimraf",{"_index":675,"title":{},"body":{"dependencies.html":{}}}],["run",{"_index":720,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":461,"title":{},"body":{"injectables/ScanEventProcessor.html":{},"classes/ViewInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":594,"title":{},"body":{"classes/ViewInterceptor.html":{}}}],["sast",{"_index":358,"title":{},"body":{"classes/FindOneScanResponseDto.html":{},"classes/FindingResponseDto.html":{},"classes/Location.html":{}}}],["save",{"_index":453,"title":{},"body":{"injectables/ScanEventProcessor.html":{},"miscellaneous/variables.html":{}}}],["scan",{"_index":145,"title":{},"body":{"injectables/CacheWrapperService.html":{},"classes/CreateScanRequestDto.html":{},"classes/CreateScanResponseDto.html":{},"classes/EventQueueConsumer.html":{},"injectables/EventQueueProducer.html":{},"classes/FindOneScanResponseDto.html":{},"classes/FindingResponseDto.html":{},"classes/Location.html":{},"entities/ScanEvent.html":{},"injectables/ScanEventContext.html":{},"injectables/ScanEventProcessor.html":{},"controllers/ScansController.html":{},"injectables/ScansService.html":{},"entities/Vulnerability.html":{},"modules/WorkersModule.html":{},"index.html":{}}}],["scan(event",{"_index":454,"title":{},"body":{"injectables/ScanEventProcessor.html":{}}}],["scan.dto",{"_index":346,"title":{},"body":{"classes/FindOneScanResponseDto.html":{},"classes/FindingResponseDto.html":{},"classes/Location.html":{},"injectables/ScanEventContext.html":{},"controllers/ScansController.html":{},"injectables/ScansService.html":{}}}],["scan.dto.ts",{"_index":206,"title":{},"body":{"classes/CreateScanRequestDto.html":{},"classes/CreateScanResponseDto.html":{},"classes/FindOneScanResponseDto.html":{},"classes/FindingResponseDto.html":{},"classes/Location.html":{},"coverage.html":{}}}],["scan.dto.ts:13",{"_index":362,"title":{},"body":{"classes/Location.html":{}}}],["scan.dto.ts:15",{"_index":212,"title":{},"body":{"classes/CreateScanRequestDto.html":{}}}],["scan.dto.ts:19",{"_index":364,"title":{},"body":{"classes/Location.html":{}}}],["scan.dto.ts:26",{"_index":253,"title":{},"body":{"classes/CreateScanResponseDto.html":{}}}],["scan.dto.ts:32",{"_index":252,"title":{},"body":{"classes/CreateScanResponseDto.html":{}}}],["scan.dto.ts:33",{"_index":361,"title":{},"body":{"classes/FindingResponseDto.html":{}}}],["scan.dto.ts:38",{"_index":256,"title":{},"body":{"classes/CreateScanResponseDto.html":{},"classes/FindingResponseDto.html":{}}}],["scan.dto.ts:43",{"_index":257,"title":{},"body":{"classes/CreateScanResponseDto.html":{}}}],["scan.dto.ts:49",{"_index":254,"title":{},"body":{"classes/CreateScanResponseDto.html":{},"classes/FindOneScanResponseDto.html":{}}}],["scan.dto.ts:55",{"_index":255,"title":{},"body":{"classes/CreateScanResponseDto.html":{}}}],["scan.dto.ts:61",{"_index":251,"title":{},"body":{"classes/CreateScanResponseDto.html":{}}}],["scan.dto.ts:67",{"_index":340,"title":{},"body":{"classes/FindOneScanResponseDto.html":{}}}],["scan_event",{"_index":300,"title":{},"body":{"modules/EventQueueModule.html":{}}}],["scan_events",{"_index":391,"title":{},"body":{"entities/ScanEvent.html":{}}}],["scaneven_${id",{"_index":539,"title":{},"body":{"injectables/ScansService.html":{}}}],["scanevent",{"_index":219,"title":{"entities/ScanEvent.html":{}},"body":{"classes/CreateScanRequestDto.html":{},"classes/CreateScanResponseDto.html":{},"interfaces/EventInterface.html":{},"injectables/EventQueueProducer.html":{},"classes/FindOneScanResponseDto.html":{},"classes/FindingResponseDto.html":{},"classes/Location.html":{},"entities/ScanEvent.html":{},"injectables/ScanEventContext.html":{},"injectables/ScanEventProcessor.html":{},"modules/ScansModule.html":{},"injectables/ScansService.html":{},"entities/Vulnerability.html":{},"coverage.html":{}}}],["scanevent.createddate",{"_index":240,"title":{},"body":{"classes/CreateScanRequestDto.html":{},"classes/CreateScanResponseDto.html":{}}}],["scanevent.id",{"_index":238,"title":{},"body":{"classes/CreateScanRequestDto.html":{},"classes/CreateScanResponseDto.html":{}}}],["scanevent.queuedat",{"_index":250,"title":{},"body":{"classes/CreateScanRequestDto.html":{},"classes/CreateScanResponseDto.html":{}}}],["scanevent.repsositoryname",{"_index":246,"title":{},"body":{"classes/CreateScanRequestDto.html":{},"classes/CreateScanResponseDto.html":{}}}],["scanevent.status",{"_index":248,"title":{},"body":{"classes/CreateScanRequestDto.html":{},"classes/CreateScanResponseDto.html":{},"injectables/ScansService.html":{}}}],["scanevent.updateddate",{"_index":242,"title":{},"body":{"classes/CreateScanRequestDto.html":{},"classes/CreateScanResponseDto.html":{}}}],["scanevent.uuid",{"_index":244,"title":{},"body":{"classes/CreateScanRequestDto.html":{},"classes/CreateScanResponseDto.html":{}}}],["scanevent.vulnerabilities",{"_index":610,"title":{},"body":{"entities/Vulnerability.html":{}}}],["scaneventcontext",{"_index":394,"title":{"injectables/ScanEventContext.html":{}},"body":{"injectables/ScanEventContext.html":{},"injectables/ScanEventProcessor.html":{},"modules/ScansModule.html":{},"injectables/ScansService.html":{},"coverage.html":{},"overview.html":{}}}],["scaneventprocesor",{"_index":274,"title":{},"body":{"classes/EventQueueConsumer.html":{}}}],["scaneventprocessor",{"_index":272,"title":{"injectables/ScanEventProcessor.html":{}},"body":{"classes/EventQueueConsumer.html":{},"injectables/ScanEventProcessor.html":{},"modules/WorkersModule.html":{},"coverage.html":{},"overview.html":{}}}],["scaneventrepository",{"_index":406,"title":{},"body":{"injectables/ScanEventContext.html":{}}}],["scanned",{"_index":266,"title":{},"body":{"interfaces/EventInterface.html":{}}}],["scanning",{"_index":476,"title":{},"body":{"injectables/ScanEventProcessor.html":{},"index.html":{}}}],["scans.controller",{"_index":526,"title":{},"body":{"modules/ScansModule.html":{}}}],["scans.service",{"_index":500,"title":{},"body":{"controllers/ScansController.html":{},"modules/ScansModule.html":{}}}],["scanscontroller",{"_index":485,"title":{"controllers/ScansController.html":{}},"body":{"controllers/ScansController.html":{},"modules/ScansModule.html":{},"coverage.html":{}}}],["scansmodule",{"_index":38,"title":{"modules/ScansModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ScansModule.html":{},"modules/WorkersModule.html":{},"modules.html":{},"overview.html":{}}}],["scansservice",{"_index":499,"title":{"injectables/ScansService.html":{}},"body":{"controllers/ScansController.html":{},"modules/ScansModule.html":{},"injectables/ScansService.html":{},"coverage.html":{},"overview.html":{}}}],["schema",{"_index":92,"title":{},"body":{"classes/BaseSchema.html":{},"miscellaneous/variables.html":{}}}],["schema.entity",{"_index":389,"title":{},"body":{"entities/ScanEvent.html":{},"entities/Vulnerability.html":{}}}],["schema.entity.ts",{"_index":90,"title":{},"body":{"classes/BaseSchema.html":{},"coverage.html":{}}}],["schema.entity.ts:17",{"_index":114,"title":{},"body":{"classes/BaseSchema.html":{}}}],["schema.entity.ts:23",{"_index":106,"title":{},"body":{"classes/BaseSchema.html":{}}}],["schema.entity.ts:29",{"_index":120,"title":{},"body":{"classes/BaseSchema.html":{}}}],["seconds",{"_index":561,"title":{},"body":{"classes/UtilsService.html":{}}}],["server",{"_index":688,"title":{},"body":{"index.html":{}}}],["service",{"_index":153,"title":{},"body":{"injectables/CacheWrapperService.html":{},"injectables/ScanEventProcessor.html":{},"controllers/ScansController.html":{},"injectables/ScansService.html":{},"classes/UtilsService.html":{}}}],["services",{"_index":146,"title":{},"body":{"injectables/CacheWrapperService.html":{},"injectables/ScansService.html":{}}}],["set",{"_index":148,"title":{},"body":{"injectables/CacheWrapperService.html":{},"classes/CreateScanRequestDto.html":{},"classes/CreateScanResponseDto.html":{},"classes/FindOneScanResponseDto.html":{},"entities/ScanEvent.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["set(key",{"_index":172,"title":{},"body":{"injectables/CacheWrapperService.html":{}}}],["setmetadata('view",{"_index":800,"title":{},"body":{"miscellaneous/variables.html":{}}}],["settimeout(resolve",{"_index":570,"title":{},"body":{"classes/UtilsService.html":{}}}],["setup",{"_index":710,"title":{},"body":{"index.html":{}}}],["side",{"_index":689,"title":{},"body":{"index.html":{}}}],["simulate",{"_index":448,"title":{},"body":{"injectables/ScanEventProcessor.html":{},"index.html":{}}}],["sleep",{"_index":475,"title":{},"body":{"injectables/ScanEventProcessor.html":{},"classes/UtilsService.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/BaseSchema.html":{},"modules/CacheWrapperModule.html":{},"injectables/CacheWrapperService.html":{},"classes/CreateScanRequestDto.html":{},"classes/CreateScanResponseDto.html":{},"interfaces/EventInterface.html":{},"classes/EventQueueConsumer.html":{},"modules/EventQueueModule.html":{},"injectables/EventQueueProducer.html":{},"classes/FindOneScanResponseDto.html":{},"classes/FindingResponseDto.html":{},"classes/Location.html":{},"entities/ScanEvent.html":{},"injectables/ScanEventContext.html":{},"injectables/ScanEventProcessor.html":{},"controllers/ScansController.html":{},"modules/ScansModule.html":{},"injectables/ScansService.html":{},"classes/UtilsService.html":{},"classes/ViewInterceptor.html":{},"entities/Vulnerability.html":{},"modules/WorkersModule.html":{},"miscellaneous/variables.html":{}}}],["src/.../base",{"_index":766,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../cache.mock.ts",{"_index":767,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../common.mock.ts",{"_index":764,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../constants.ts",{"_index":769,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":684,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../ormconfig.ts",{"_index":768,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../queue.mock.ts",{"_index":770,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../repository.mock.factory.ts",{"_index":771,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../view.decorator.ts",{"_index":772,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:14",{"_index":15,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":42,"title":{},"body":{"modules/AppModule.html":{}}}],["src/cache/cache",{"_index":130,"title":{},"body":{"modules/CacheWrapperModule.html":{},"injectables/CacheWrapperService.html":{},"coverage.html":{}}}],["src/common/base",{"_index":89,"title":{},"body":{"classes/BaseSchema.html":{},"coverage.html":{}}}],["src/common/constants.ts",{"_index":627,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/decorators/base",{"_index":630,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/decorators/view.decorator.ts",{"_index":632,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/interceptors/view.interceptor.ts",{"_index":572,"title":{},"body":{"classes/ViewInterceptor.html":{},"coverage.html":{}}}],["src/common/interceptors/view.interceptor.ts:10",{"_index":580,"title":{},"body":{"classes/ViewInterceptor.html":{}}}],["src/common/interceptors/view.interceptor.ts:25",{"_index":586,"title":{},"body":{"classes/ViewInterceptor.html":{}}}],["src/common/utils.service.ts",{"_index":542,"title":{},"body":{"classes/UtilsService.html":{},"coverage.html":{}}}],["src/common/utils.service.ts:15",{"_index":549,"title":{},"body":{"classes/UtilsService.html":{}}}],["src/common/utils.service.ts:29",{"_index":559,"title":{},"body":{"classes/UtilsService.html":{}}}],["src/common/utils.service.ts:38",{"_index":553,"title":{},"body":{"classes/UtilsService.html":{}}}],["src/common/utils.service.ts:8",{"_index":548,"title":{},"body":{"classes/UtilsService.html":{}}}],["src/database/ormconfig.ts",{"_index":635,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/main.ts",{"_index":637,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/message",{"_index":261,"title":{},"body":{"interfaces/EventInterface.html":{},"classes/EventQueueConsumer.html":{},"modules/EventQueueModule.html":{},"injectables/EventQueueProducer.html":{},"coverage.html":{}}}],["src/mock/cache.mock.ts",{"_index":639,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/mock/common.mock.ts",{"_index":765,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/mock/queue.mock.ts",{"_index":641,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/mock/repository.mock.factory.ts",{"_index":643,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/scans/contexts/scan",{"_index":395,"title":{},"body":{"injectables/ScanEventContext.html":{},"coverage.html":{}}}],["src/modules/scans/dto/create",{"_index":205,"title":{},"body":{"classes/CreateScanRequestDto.html":{},"classes/CreateScanResponseDto.html":{},"coverage.html":{}}}],["src/modules/scans/dto/findone",{"_index":325,"title":{},"body":{"classes/FindOneScanResponseDto.html":{},"classes/FindingResponseDto.html":{},"classes/Location.html":{},"coverage.html":{}}}],["src/modules/scans/entities/scan",{"_index":365,"title":{},"body":{"entities/ScanEvent.html":{},"coverage.html":{}}}],["src/modules/scans/entities/vulnerability.entity.ts",{"_index":606,"title":{},"body":{"entities/Vulnerability.html":{},"coverage.html":{}}}],["src/modules/scans/entities/vulnerability.entity.ts:14",{"_index":608,"title":{},"body":{"entities/Vulnerability.html":{}}}],["src/modules/scans/entities/vulnerability.entity.ts:20",{"_index":607,"title":{},"body":{"entities/Vulnerability.html":{}}}],["src/modules/scans/entities/vulnerability.entity.ts:27",{"_index":611,"title":{},"body":{"entities/Vulnerability.html":{}}}],["src/modules/scans/scans.controller.ts",{"_index":486,"title":{},"body":{"controllers/ScansController.html":{},"coverage.html":{}}}],["src/modules/scans/scans.controller.ts:34",{"_index":490,"title":{},"body":{"controllers/ScansController.html":{}}}],["src/modules/scans/scans.controller.ts:49",{"_index":495,"title":{},"body":{"controllers/ScansController.html":{}}}],["src/modules/scans/scans.module.ts",{"_index":525,"title":{},"body":{"modules/ScansModule.html":{}}}],["src/modules/scans/scans.service.ts",{"_index":529,"title":{},"body":{"injectables/ScansService.html":{},"coverage.html":{}}}],["src/modules/scans/scans.service.ts:13",{"_index":531,"title":{},"body":{"injectables/ScansService.html":{}}}],["src/modules/scans/scans.service.ts:33",{"_index":532,"title":{},"body":{"injectables/ScansService.html":{}}}],["src/modules/scans/scans.service.ts:45",{"_index":533,"title":{},"body":{"injectables/ScansService.html":{}}}],["src/workers/scan",{"_index":438,"title":{},"body":{"injectables/ScanEventProcessor.html":{},"coverage.html":{}}}],["src/workers/workers.module.ts",{"_index":617,"title":{},"body":{"modules/WorkersModule.html":{}}}],["start",{"_index":723,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":726,"title":{},"body":{"index.html":{}}}],["start:prod",{"_index":728,"title":{},"body":{"index.html":{}}}],["started",{"_index":687,"title":{"index.html":{}},"body":{}}],["state",{"_index":410,"title":{},"body":{"injectables/ScanEventContext.html":{}}}],["statements",{"_index":622,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":543,"title":{},"body":{"classes/UtilsService.html":{}}}],["status",{"_index":231,"title":{},"body":{"classes/CreateScanRequestDto.html":{},"classes/CreateScanResponseDto.html":{},"classes/FindOneScanResponseDto.html":{},"entities/ScanEvent.html":{},"injectables/ScanEventContext.html":{}}}],["statuscode",{"_index":602,"title":{},"body":{"classes/ViewInterceptor.html":{},"miscellaneous/variables.html":{}}}],["store",{"_index":138,"title":{},"body":{"modules/CacheWrapperModule.html":{},"dependencies.html":{}}}],["string",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"injectables/CacheWrapperService.html":{},"classes/CreateScanRequestDto.html":{},"classes/CreateScanResponseDto.html":{},"interfaces/EventInterface.html":{},"classes/FindOneScanResponseDto.html":{},"classes/FindingResponseDto.html":{},"classes/Location.html":{},"entities/ScanEvent.html":{},"injectables/ScanEventContext.html":{},"controllers/ScansController.html":{},"injectables/ScansService.html":{},"entities/Vulnerability.html":{},"miscellaneous/variables.html":{}}}],["success",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"classes/CreateScanRequestDto.html":{},"classes/CreateScanResponseDto.html":{},"classes/FindOneScanResponseDto.html":{},"entities/ScanEvent.html":{},"injectables/ScanEventContext.html":{},"injectables/ScansService.html":{}}}],["successat",{"_index":369,"title":{},"body":{"entities/ScanEvent.html":{},"injectables/ScanEventContext.html":{}}}],["super(scanevent",{"_index":354,"title":{},"body":{"classes/FindOneScanResponseDto.html":{},"classes/FindingResponseDto.html":{},"classes/Location.html":{}}}],["support",{"_index":749,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":750,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":678,"title":{},"body":{"dependencies.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["synchronize",{"_index":80,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["t",{"_index":165,"title":{},"body":{"injectables/CacheWrapperService.html":{}}}],["table",{"_index":649,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":648,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":709,"title":{},"body":{"index.html":{}}}],["take",{"_index":694,"title":{},"body":{"index.html":{}}}],["template",{"_index":342,"title":{},"body":{"classes/FindOneScanResponseDto.html":{},"classes/FindingResponseDto.html":{},"classes/Location.html":{}}}],["test",{"_index":738,"title":{},"body":{"index.html":{}}}],["test.env.example",{"_index":739,"title":{},"body":{"index.html":{}}}],["test:covcheck",{"_index":743,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":747,"title":{},"body":{"index.html":{}}}],["testing",{"_index":740,"title":{},"body":{"index.html":{}}}],["text",{"_index":21,"title":{},"body":{"controllers/AppController.html":{}}}],["this.buildevent(data",{"_index":319,"title":{},"body":{"injectables/EventQueueProducer.html":{}}}],["this.buildfindings(scanevent.vulnerabilities",{"_index":356,"title":{},"body":{"classes/FindOneScanResponseDto.html":{},"classes/FindingResponseDto.html":{},"classes/Location.html":{}}}],["this.cachemanager.del(key",{"_index":201,"title":{},"body":{"injectables/CacheWrapperService.html":{}}}],["this.cachemanager.get(key",{"_index":200,"title":{},"body":{"injectables/CacheWrapperService.html":{}}}],["this.cachemanager.reset",{"_index":202,"title":{},"body":{"injectables/CacheWrapperService.html":{}}}],["this.cachemanager.set(key",{"_index":199,"title":{},"body":{"injectables/CacheWrapperService.html":{}}}],["this.cachemanager.wrap(key",{"_index":203,"title":{},"body":{"injectables/CacheWrapperService.html":{}}}],["this.cachewrapperservice.get",{"_index":538,"title":{},"body":{"injectables/ScansService.html":{}}}],["this.cachewrapperservice.set(`scaneven_${id",{"_index":541,"title":{},"body":{"injectables/ScansService.html":{}}}],["this.createddate",{"_index":239,"title":{},"body":{"classes/CreateScanRequestDto.html":{},"classes/CreateScanResponseDto.html":{}}}],["this.eventqueue.add(event",{"_index":320,"title":{},"body":{"injectables/EventQueueProducer.html":{}}}],["this.eventqueueproducer.addevent(event",{"_index":537,"title":{},"body":{"injectables/ScansService.html":{}}}],["this.findings",{"_index":355,"title":{},"body":{"classes/FindOneScanResponseDto.html":{},"classes/FindingResponseDto.html":{},"classes/Location.html":{}}}],["this.httpservice",{"_index":480,"title":{},"body":{"injectables/ScanEventProcessor.html":{}}}],["this.id",{"_index":237,"title":{},"body":{"classes/CreateScanRequestDto.html":{},"classes/CreateScanResponseDto.html":{}}}],["this.instance",{"_index":566,"title":{},"body":{"classes/UtilsService.html":{}}}],["this.queuedat",{"_index":249,"title":{},"body":{"classes/CreateScanRequestDto.html":{},"classes/CreateScanResponseDto.html":{}}}],["this.reflector.get('view",{"_index":595,"title":{},"body":{"classes/ViewInterceptor.html":{}}}],["this.repsositoryname",{"_index":245,"title":{},"body":{"classes/CreateScanRequestDto.html":{},"classes/CreateScanResponseDto.html":{}}}],["this.scan(scanevent",{"_index":471,"title":{},"body":{"injectables/ScanEventProcessor.html":{}}}],["this.scaneventcontext.completeevent(scanevent",{"_index":474,"title":{},"body":{"injectables/ScanEventProcessor.html":{}}}],["this.scaneventcontext.create(createscandto",{"_index":536,"title":{},"body":{"injectables/ScansService.html":{}}}],["this.scaneventcontext.findone(event.eventid",{"_index":468,"title":{},"body":{"injectables/ScanEventProcessor.html":{}}}],["this.scaneventcontext.findone(id",{"_index":540,"title":{},"body":{"injectables/ScansService.html":{}}}],["this.scaneventcontext.markasfailedevent(scanevent",{"_index":473,"title":{},"body":{"injectables/ScanEventProcessor.html":{}}}],["this.scaneventcontext.processevent(scanevent",{"_index":469,"title":{},"body":{"injectables/ScanEventProcessor.html":{}}}],["this.scaneventprocesor.process(job.data",{"_index":288,"title":{},"body":{"classes/EventQueueConsumer.html":{}}}],["this.scaneventrepository.findone",{"_index":435,"title":{},"body":{"injectables/ScanEventContext.html":{}}}],["this.scaneventrepository.save",{"_index":431,"title":{},"body":{"injectables/ScanEventContext.html":{}}}],["this.scaneventrepository.update(event.id",{"_index":434,"title":{},"body":{"injectables/ScanEventContext.html":{}}}],["this.scansservice.create(createscandto",{"_index":514,"title":{},"body":{"controllers/ScansController.html":{}}}],["this.scansservice.findone(id",{"_index":520,"title":{},"body":{"controllers/ScansController.html":{}}}],["this.status",{"_index":247,"title":{},"body":{"classes/CreateScanRequestDto.html":{},"classes/CreateScanResponseDto.html":{}}}],["this.update(event",{"_index":433,"title":{},"body":{"injectables/ScanEventContext.html":{}}}],["this.updateddate",{"_index":241,"title":{},"body":{"classes/CreateScanRequestDto.html":{},"classes/CreateScanResponseDto.html":{}}}],["this.utilsservice",{"_index":466,"title":{},"body":{"injectables/ScanEventProcessor.html":{}}}],["this.utilsservice.randominteger(5",{"_index":479,"title":{},"body":{"injectables/ScanEventProcessor.html":{}}}],["this.utilsservice.randomsleep",{"_index":478,"title":{},"body":{"injectables/ScanEventProcessor.html":{}}}],["this.uuid",{"_index":243,"title":{},"body":{"classes/CreateScanRequestDto.html":{},"classes/CreateScanResponseDto.html":{}}}],["this.vulnerabilityrepository.save",{"_index":437,"title":{},"body":{"injectables/ScanEventContext.html":{}}}],["through",{"_index":697,"title":{},"body":{"index.html":{}}}],["time",{"_index":177,"title":{},"body":{"injectables/CacheWrapperService.html":{},"classes/UtilsService.html":{},"index.html":{}}}],["tmodel",{"_index":774,"title":{},"body":{"miscellaneous/variables.html":{}}}],["transcode",{"_index":270,"title":{},"body":{"classes/EventQueueConsumer.html":{}}}],["transcode(job",{"_index":276,"title":{},"body":{"classes/EventQueueConsumer.html":{}}}],["transformer",{"_index":593,"title":{},"body":{"classes/ViewInterceptor.html":{},"dependencies.html":{}}}],["trigger",{"_index":491,"title":{},"body":{"controllers/ScansController.html":{},"injectables/ScansService.html":{}}}],["true",{"_index":79,"title":{},"body":{"modules/AppModule.html":{},"modules/CacheWrapperModule.html":{},"injectables/EventQueueProducer.html":{},"entities/ScanEvent.html":{},"injectables/ScanEventContext.html":{}}}],["ttl",{"_index":173,"title":{},"body":{"injectables/CacheWrapperService.html":{},"miscellaneous/variables.html":{}}}],["type",{"_index":64,"title":{},"body":{"modules/AppModule.html":{},"classes/BaseSchema.html":{},"modules/CacheWrapperModule.html":{},"injectables/CacheWrapperService.html":{},"classes/CreateScanRequestDto.html":{},"classes/CreateScanResponseDto.html":{},"interfaces/EventInterface.html":{},"classes/EventQueueConsumer.html":{},"injectables/EventQueueProducer.html":{},"classes/FindOneScanResponseDto.html":{},"classes/FindingResponseDto.html":{},"classes/Location.html":{},"entities/ScanEvent.html":{},"injectables/ScanEventContext.html":{},"injectables/ScanEventProcessor.html":{},"controllers/ScansController.html":{},"injectables/ScansService.html":{},"classes/UtilsService.html":{},"classes/ViewInterceptor.html":{},"entities/Vulnerability.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":761,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeorm",{"_index":124,"title":{},"body":{"classes/BaseSchema.html":{},"entities/ScanEvent.html":{},"injectables/ScanEventContext.html":{},"entities/Vulnerability.html":{},"dependencies.html":{},"index.html":{}}}],["typeormmodule",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"modules/ScansModule.html":{}}}],["typeormmodule.forfeature([scanevent",{"_index":528,"title":{},"body":{"modules/ScansModule.html":{}}}],["typeormmodule.forrootasync",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":659,"title":{},"body":{"dependencies.html":{}}}],["ui",{"_index":679,"title":{},"body":{"dependencies.html":{}}}],["undefined",{"_index":377,"title":{},"body":{"entities/ScanEvent.html":{}}}],["unique",{"_index":224,"title":{},"body":{"classes/CreateScanRequestDto.html":{},"classes/CreateScanResponseDto.html":{},"classes/FindOneScanResponseDto.html":{},"entities/ScanEvent.html":{},"injectables/ScanEventContext.html":{},"controllers/ScansController.html":{},"injectables/ScansService.html":{}}}],["unknown",{"_index":197,"title":{},"body":{"injectables/CacheWrapperService.html":{},"classes/EventQueueConsumer.html":{},"controllers/ScansController.html":{},"injectables/ScansService.html":{}}}],["unlicensed",{"_index":759,"title":{},"body":{"properties.html":{}}}],["up",{"_index":189,"title":{},"body":{"injectables/CacheWrapperService.html":{},"classes/ViewInterceptor.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["update",{"_index":122,"title":{},"body":{"classes/BaseSchema.html":{},"classes/CreateScanRequestDto.html":{},"classes/CreateScanResponseDto.html":{},"classes/FindOneScanResponseDto.html":{},"injectables/ScanEventContext.html":{},"miscellaneous/variables.html":{}}}],["update(event",{"_index":424,"title":{},"body":{"injectables/ScanEventContext.html":{}}}],["updatedatecolumn",{"_index":119,"title":{},"body":{"classes/BaseSchema.html":{}}}],["updateddate",{"_index":103,"title":{},"body":{"classes/BaseSchema.html":{},"classes/CreateScanRequestDto.html":{},"classes/CreateScanResponseDto.html":{},"classes/FindOneScanResponseDto.html":{}}}],["usefactory",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"modules/CacheWrapperModule.html":{}}}],["username",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["using",{"_index":729,"title":{},"body":{"index.html":{}}}],["utility",{"_index":456,"title":{},"body":{"injectables/ScanEventProcessor.html":{},"classes/UtilsService.html":{}}}],["utilsservice",{"_index":441,"title":{"classes/UtilsService.html":{}},"body":{"injectables/ScanEventProcessor.html":{},"classes/UtilsService.html":{},"coverage.html":{}}}],["utilsservice.getinstance",{"_index":467,"title":{},"body":{"injectables/ScanEventProcessor.html":{}}}],["uuid",{"_index":229,"title":{},"body":{"classes/CreateScanRequestDto.html":{},"classes/CreateScanResponseDto.html":{},"interfaces/EventInterface.html":{},"classes/FindOneScanResponseDto.html":{},"entities/ScanEvent.html":{},"injectables/ScanEventContext.html":{}}}],["v19.2.0",{"_index":702,"title":{},"body":{"index.html":{}}}],["validator",{"_index":218,"title":{},"body":{"classes/CreateScanRequestDto.html":{},"classes/CreateScanResponseDto.html":{},"dependencies.html":{}}}],["value",{"_index":167,"title":{},"body":{"injectables/CacheWrapperService.html":{},"classes/UtilsService.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":628,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":716,"title":{"miscellaneous/variables.html":{}},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["version",{"_index":756,"title":{},"body":{"properties.html":{}}}],["view",{"_index":507,"title":{},"body":{"controllers/ScansController.html":{},"classes/ViewInterceptor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["view(createscanresponsedto",{"_index":510,"title":{},"body":{"controllers/ScansController.html":{}}}],["view(data.result",{"_index":601,"title":{},"body":{"classes/ViewInterceptor.html":{}}}],["view(findonescanresponsedto",{"_index":516,"title":{},"body":{"controllers/ScansController.html":{}}}],["viewinstance",{"_index":600,"title":{},"body":{"classes/ViewInterceptor.html":{}}}],["viewinterceptor",{"_index":571,"title":{"classes/ViewInterceptor.html":{}},"body":{"classes/ViewInterceptor.html":{},"coverage.html":{}}}],["void",{"_index":182,"title":{},"body":{"injectables/CacheWrapperService.html":{}}}],["vulnerabilities",{"_index":330,"title":{},"body":{"classes/FindOneScanResponseDto.html":{},"classes/FindingResponseDto.html":{},"classes/Location.html":{},"entities/ScanEvent.html":{},"injectables/ScanEventContext.html":{},"injectables/ScanEventProcessor.html":{},"entities/Vulnerability.html":{}}}],["vulnerabilities.map((vulnerability",{"_index":357,"title":{},"body":{"classes/FindOneScanResponseDto.html":{},"classes/FindingResponseDto.html":{},"classes/Location.html":{}}}],["vulnerability",{"_index":347,"title":{"entities/Vulnerability.html":{}},"body":{"classes/FindOneScanResponseDto.html":{},"classes/FindingResponseDto.html":{},"classes/Location.html":{},"entities/ScanEvent.html":{},"injectables/ScanEventContext.html":{},"modules/ScansModule.html":{},"entities/Vulnerability.html":{},"coverage.html":{}}}],["vulnerability.entity",{"_index":390,"title":{},"body":{"entities/ScanEvent.html":{}}}],["vulnerability.line",{"_index":360,"title":{},"body":{"classes/FindOneScanResponseDto.html":{},"classes/FindingResponseDto.html":{},"classes/Location.html":{}}}],["vulnerability.path",{"_index":359,"title":{},"body":{"classes/FindOneScanResponseDto.html":{},"classes/FindingResponseDto.html":{},"classes/Location.html":{}}}],["vulnerability.scanevent",{"_index":384,"title":{},"body":{"entities/ScanEvent.html":{}}}],["vulnerabilitynum",{"_index":470,"title":{},"body":{"injectables/ScanEventProcessor.html":{}}}],["vulnerabilityrepository",{"_index":404,"title":{},"body":{"injectables/ScanEventContext.html":{}}}],["want",{"_index":175,"title":{},"body":{"injectables/CacheWrapperService.html":{}}}],["watch",{"_index":724,"title":{},"body":{"index.html":{}}}],["workers/scan",{"_index":283,"title":{},"body":{"classes/EventQueueConsumer.html":{}}}],["workers/workers.module",{"_index":296,"title":{},"body":{"modules/EventQueueModule.html":{}}}],["workersmodule",{"_index":294,"title":{"modules/WorkersModule.html":{}},"body":{"modules/EventQueueModule.html":{},"modules/WorkersModule.html":{},"modules.html":{},"overview.html":{}}}],["wrap",{"_index":149,"title":{},"body":{"injectables/CacheWrapperService.html":{},"classes/ViewInterceptor.html":{},"miscellaneous/variables.html":{}}}],["wrap(key",{"_index":180,"title":{},"body":{"injectables/CacheWrapperService.html":{}}}],["wrapper.module",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"modules/ScansModule.html":{}}}],["wrapper.module.ts",{"_index":131,"title":{},"body":{"modules/CacheWrapperModule.html":{}}}],["wrapper.service",{"_index":139,"title":{},"body":{"modules/CacheWrapperModule.html":{},"injectables/ScansService.html":{}}}],["wrapper.service.ts",{"_index":144,"title":{},"body":{"injectables/CacheWrapperService.html":{},"coverage.html":{}}}],["wrapper.service.ts:24",{"_index":174,"title":{},"body":{"injectables/CacheWrapperService.html":{}}}],["wrapper.service.ts:34",{"_index":164,"title":{},"body":{"injectables/CacheWrapperService.html":{}}}],["wrapper.service.ts:43",{"_index":160,"title":{},"body":{"injectables/CacheWrapperService.html":{}}}],["wrapper.service.ts:50",{"_index":169,"title":{},"body":{"injectables/CacheWrapperService.html":{}}}],["wrapper.service.ts:62",{"_index":183,"title":{},"body":{"injectables/CacheWrapperService.html":{}}}],["wrapper.service.ts:8",{"_index":152,"title":{},"body":{"injectables/CacheWrapperService.html":{}}}],["yes",{"_index":176,"title":{},"body":{"injectables/CacheWrapperService.html":{}}}],["zoom",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"modules/CacheWrapperModule.html":{},"modules/EventQueueModule.html":{},"modules/ScansModule.html":{},"modules/WorkersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                App controller\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                healthCheck\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        healthCheck\n                        \n                    \n                \n            \n            \n                \nhealthCheck()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:14\n                \n            \n\n\n            \n                \n                    The health check function\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The text\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\n\n/**\n * App controller\n */\n@Controller()\nexport class AppController {\n  /**\n   * The health check function\n   *\n   * @returns The text\n   */\n  @Get()\n  healthCheck(): string {\n    return 'Success';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nCacheWrapperModule\n\nCacheWrapperModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nCacheWrapperModule->AppModule\n\n\n\n\n\nEventQueueModule\n\nEventQueueModule\n\nAppModule -->\n\nEventQueueModule->AppModule\n\n\n\n\n\nScansModule\n\nScansModule\n\nAppModule -->\n\nScansModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CacheWrapperModule\n                        \n                        \n                            EventQueueModule\n                        \n                        \n                            ScansModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { BullModule } from '@nestjs/bull';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AppController } from './app.controller';\nimport configuration from './configuration';\nimport { EventQueueModule } from './message-queue/event-queue.module';\nimport { ScansModule } from './modules/scans/scans.module';\nimport { CacheWrapperModule } from './cache/cache-wrapper.module';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      load: [configuration],\n    }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      useFactory: async (configService: ConfigService) => {\n        return {\n          type: 'postgres',\n          host: configService.get('database').host,\n          port: configService.get('database').port,\n          username: configService.get('database').username,\n          password: configService.get('database').password,\n          database: configService.get('database').database,\n          poolSize: configService.get('database').poolSize,\n          autoLoadEntities: true,\n          synchronize: true,\n        };\n      },\n      inject: [ConfigService],\n    }),\n    BullModule.forRootAsync({\n      imports: [ConfigModule],\n      useFactory: async (configService: ConfigService) => {\n        return {\n          redis: {\n            host: configService.get('queue').host,\n            port: configService.get('queue').port,\n          },\n        };\n      },\n      inject: [ConfigService],\n    }),\n    CacheWrapperModule,\n    EventQueueModule,\n    ScansModule,\n  ],\n  controllers: [AppController],\n  providers: [],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BaseSchema.html":{"url":"classes/BaseSchema.html","title":"class - BaseSchema","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BaseSchema\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/base-schema.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Base schema define the common fields,\nAll entities should extend from BaseSchema\n\n            \n\n            \n                Extends\n            \n            \n                    BaseEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                createdDate\n                            \n                            \n                                id\n                            \n                            \n                                updatedDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        createdDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/base-schema.entity.ts:23\n                        \n                    \n\n            \n                \n                    createdDate is a datetime and generated when insert a new record\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/base-schema.entity.ts:17\n                        \n                    \n\n            \n                \n                    id is a primary key and automatic increase when insert a new record\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/base-schema.entity.ts:29\n                        \n                    \n\n            \n                \n                    updatedDate is a datetime and changed when any update happen\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  BaseEntity,\n  CreateDateColumn,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\n/**\n * Base schema define the common fields,\n * All entities should extend from BaseSchema\n */\nexport abstract class BaseSchema extends BaseEntity {\n  /**\n   * id is a primary key and automatic increase when insert a new record\n   */\n  @PrimaryGeneratedColumn()\n  id!: number;\n\n  /**\n   * createdDate is a datetime and generated when insert a new record\n   */\n  @CreateDateColumn()\n  createdDate!: Date;\n\n  /**\n   * updatedDate is a datetime and changed when any update happen\n   */\n  @UpdateDateColumn()\n  updatedDate!: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CacheWrapperModule.html":{"url":"modules/CacheWrapperModule.html","title":"module - CacheWrapperModule","body":"\n                   \n\n\n\n\n    Modules\n    CacheWrapperModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_CacheWrapperModule\n\n\n\ncluster_CacheWrapperModule_exports\n\n\n\ncluster_CacheWrapperModule_providers\n\n\n\n\nCacheWrapperService \n\nCacheWrapperService \n\n\n\nCacheWrapperModule\n\nCacheWrapperModule\n\nCacheWrapperService  -->\n\nCacheWrapperModule->CacheWrapperService \n\n\n\n\n\nCacheWrapperService\n\nCacheWrapperService\n\nCacheWrapperModule -->\n\nCacheWrapperService->CacheWrapperModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/cache/cache-wrapper.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CacheWrapperService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CacheWrapperService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { CacheModule, Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport type { RedisClientOptions } from 'redis';\nimport * as redisStore from 'cache-manager-redis-store';\nimport { CacheWrapperService } from './cache-wrapper.service';\n\n@Module({\n  imports: [\n    CacheModule.registerAsync({\n      imports: [ConfigModule],\n      useFactory: async (configService: ConfigService) => {\n        return {\n          store: redisStore,\n          host: configService.get('queue').host,\n          port: configService.get('queue').port,\n          isGlobal: true,\n        };\n      },\n      inject: [ConfigService],\n    }),\n  ],\n  controllers: [],\n  providers: [CacheWrapperService],\n  exports: [CacheWrapperService],\n})\nexport class CacheWrapperModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CacheWrapperService.html":{"url":"injectables/CacheWrapperService.html","title":"injectable - CacheWrapperService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CacheWrapperService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/cache/cache-wrapper.service.ts\n        \n\n\n            \n                Description\n            \n            \n                The scan services\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                del\n                            \n                            \n                                get\n                            \n                            \n                                    Async\n                                reset\n                            \n                            \n                                    Async\n                                set\n                            \n                            \n                                wrap\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(cacheManager: Cache)\n                    \n                \n                        \n                            \n                                Defined in src/cache/cache-wrapper.service.ts:8\n                            \n                        \n\n                \n                    \n                            The constructor for the scan service\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        cacheManager\n                                                  \n                                                        \n                                                                    Cache\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The cache mananger\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        del\n                        \n                    \n                \n            \n            \n                \n                    \n                    del(key: string)\n                \n            \n\n\n            \n                \n                    Defined in src/cache/cache-wrapper.service.ts:43\n                \n            \n\n\n            \n                \n                    To delete the cache by the key\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The string\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(key: string)\n                \n            \n\n\n            \n                \n                    Defined in src/cache/cache-wrapper.service.ts:34\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    To get the cached value by the key\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the string\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        The cached value or null\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        reset\n                        \n                    \n                \n            \n            \n                \n                    \n                    reset()\n                \n            \n\n\n            \n                \n                    Defined in src/cache/cache-wrapper.service.ts:50\n                \n            \n\n\n            \n                \n                    To clear all caches\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        set\n                        \n                    \n                \n            \n            \n                \n                    \n                    set(key: string, value, ttl?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/cache/cache-wrapper.service.ts:24\n                \n            \n\n\n            \n                \n                    To cache the value with the key\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The string\n\n                                    \n                                \n                                \n                                    value\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Any value want to cache\n\n                                    \n                                \n                                \n                                    ttl\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The time to live in millisecond\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        wrap\n                        \n                    \n                \n            \n            \n                \nwrap(key: string, fn: () => void, ttl?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/cache/cache-wrapper.service.ts:62\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    To cache the value at the first time, another time it will get the cached value\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The string\n\n                                    \n                                \n                                \n                                    fn\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The fetch data function need to wrap up\n\n                                    \n                                \n                                \n                                    ttl\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The time to live\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        The cached value\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { CACHE_MANAGER, Inject, Injectable } from '@nestjs/common';\nimport { Cache } from 'cache-manager';\n\n/**\n * The scan services\n */\n@Injectable()\nexport class CacheWrapperService {\n  /**\n   * The constructor for the scan service\n   *\n   * @param eventQueueProducer The event producer\n   * @param cacheManager The cache mananger\n   */\n  constructor(@Inject(CACHE_MANAGER) private cacheManager: Cache) {}\n\n  /**\n   * To cache the value with the key\n   *\n   * @param key The string\n   * @param value Any value want to cache\n   * @param ttl The time to live in millisecond\n   */\n  async set(key: string, value: unknown, ttl?: number): Promise {\n    await this.cacheManager.set(key, value, ttl);\n  }\n\n  /**\n   * To get the cached value by the key\n   *\n   * @param key the string\n   * @returns The cached value or null\n   */\n  get(key: string): Promise {\n    return this.cacheManager.get(key);\n  }\n\n  /**\n   * To delete the cache by the key\n   *\n   * @param key The string\n   */\n  async del(key: string): Promise {\n    await this.cacheManager.del(key);\n  }\n\n  /**\n   * To clear all caches\n   */\n  async reset(): Promise {\n    await this.cacheManager.reset();\n  }\n\n  /**\n   * To cache the value at the first time, another time it will get the cached value\n   *\n   * @param key The string\n   * @param fn The fetch data function need to wrap up\n   * @param ttl The time to live\n   * @returns The cached value\n   */\n  wrap(key: string, fn: () => Promise, ttl?: number): Promise {\n    return this.cacheManager.wrap(key, fn, ttl);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateScanRequestDto.html":{"url":"classes/CreateScanRequestDto.html","title":"class - CreateScanRequestDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateScanRequestDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/scans/dto/create-scan.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                The creation scan request dto\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                repsositoryName\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        repsositoryName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/scans/dto/create-scan.dto.ts:15\n                        \n                    \n\n            \n                \n                    The repository name\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\nimport { ScanEvent } from '../entities/scan-event.entity';\n\n/**\n * The creation scan request dto\n */\nexport class CreateScanRequestDto {\n  /**\n   * The repository name\n   */\n  @IsString()\n  @IsNotEmpty()\n  @ApiProperty()\n  repsositoryName!: string;\n}\n\n/**\n * The creation scan response dto\n */\nexport class CreateScanResponseDto {\n  /**\n   * id is a primary key and automatic increase when insert a new record\n   */\n  @ApiProperty()\n  id: number;\n\n  /**\n   * createdDate is a datetime and generated when insert a new record\n   */\n  @ApiProperty()\n  createdDate: Date;\n\n  /**\n   * updatedDate is a datetime and changed when any update happen\n   */\n  @ApiProperty()\n  updatedDate: Date;\n  /**\n   * The unique id, it is exposed to retrieve the scan event and add to the queue\n   */\n  @ApiProperty()\n  uuid: string;\n\n  /**\n   * The respository name\n   */\n  @ApiProperty()\n  repsositoryName: string;\n\n  /**\n   * The status of the scan event, it should be changed from 'queued' -> 'processing' -> 'success' or 'failed'\n   */\n  @ApiProperty()\n  status: string;\n\n  /**\n   * The datetime when set the queued status\n   */\n  @ApiProperty()\n  queuedAt: Date;\n\n  /**\n   * The constructor for the dto\n   *\n   * @param scanEvent The scan event\n   */\n  constructor(scanEvent: ScanEvent) {\n    this.id = scanEvent.id;\n    this.createdDate = scanEvent.createdDate;\n    this.updatedDate = scanEvent.updatedDate;\n    this.uuid = scanEvent.uuid;\n    this.repsositoryName = scanEvent.repsositoryName;\n    this.status = scanEvent.status;\n    this.queuedAt = scanEvent.queuedAt;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateScanResponseDto.html":{"url":"classes/CreateScanResponseDto.html","title":"class - CreateScanResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateScanResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/scans/dto/create-scan.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                The creation scan response dto\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                createdDate\n                            \n                            \n                                id\n                            \n                            \n                                queuedAt\n                            \n                            \n                                repsositoryName\n                            \n                            \n                                status\n                            \n                            \n                                updatedDate\n                            \n                            \n                                uuid\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(scanEvent: ScanEvent)\n                    \n                \n                        \n                            \n                                Defined in src/modules/scans/dto/create-scan.dto.ts:61\n                            \n                        \n\n                \n                    \n                            The constructor for the dto\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        scanEvent\n                                                  \n                                                        \n                                                                        ScanEvent\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The scan event\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        createdDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/scans/dto/create-scan.dto.ts:32\n                        \n                    \n\n            \n                \n                    createdDate is a datetime and generated when insert a new record\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/scans/dto/create-scan.dto.ts:26\n                        \n                    \n\n            \n                \n                    id is a primary key and automatic increase when insert a new record\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        queuedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/scans/dto/create-scan.dto.ts:61\n                        \n                    \n\n            \n                \n                    The datetime when set the queued status\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        repsositoryName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/scans/dto/create-scan.dto.ts:49\n                        \n                    \n\n            \n                \n                    The respository name\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/scans/dto/create-scan.dto.ts:55\n                        \n                    \n\n            \n                \n                    The status of the scan event, it should be changed from 'queued' -> 'processing' -> 'success' or 'failed'\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/scans/dto/create-scan.dto.ts:38\n                        \n                    \n\n            \n                \n                    updatedDate is a datetime and changed when any update happen\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        uuid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/scans/dto/create-scan.dto.ts:43\n                        \n                    \n\n            \n                \n                    The unique id, it is exposed to retrieve the scan event and add to the queue\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\nimport { ScanEvent } from '../entities/scan-event.entity';\n\n/**\n * The creation scan request dto\n */\nexport class CreateScanRequestDto {\n  /**\n   * The repository name\n   */\n  @IsString()\n  @IsNotEmpty()\n  @ApiProperty()\n  repsositoryName!: string;\n}\n\n/**\n * The creation scan response dto\n */\nexport class CreateScanResponseDto {\n  /**\n   * id is a primary key and automatic increase when insert a new record\n   */\n  @ApiProperty()\n  id: number;\n\n  /**\n   * createdDate is a datetime and generated when insert a new record\n   */\n  @ApiProperty()\n  createdDate: Date;\n\n  /**\n   * updatedDate is a datetime and changed when any update happen\n   */\n  @ApiProperty()\n  updatedDate: Date;\n  /**\n   * The unique id, it is exposed to retrieve the scan event and add to the queue\n   */\n  @ApiProperty()\n  uuid: string;\n\n  /**\n   * The respository name\n   */\n  @ApiProperty()\n  repsositoryName: string;\n\n  /**\n   * The status of the scan event, it should be changed from 'queued' -> 'processing' -> 'success' or 'failed'\n   */\n  @ApiProperty()\n  status: string;\n\n  /**\n   * The datetime when set the queued status\n   */\n  @ApiProperty()\n  queuedAt: Date;\n\n  /**\n   * The constructor for the dto\n   *\n   * @param scanEvent The scan event\n   */\n  constructor(scanEvent: ScanEvent) {\n    this.id = scanEvent.id;\n    this.createdDate = scanEvent.createdDate;\n    this.updatedDate = scanEvent.updatedDate;\n    this.uuid = scanEvent.uuid;\n    this.repsositoryName = scanEvent.repsositoryName;\n    this.status = scanEvent.status;\n    this.queuedAt = scanEvent.queuedAt;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/EventInterface.html":{"url":"interfaces/EventInterface.html","title":"interface - EventInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  EventInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/message-queue/interfaces/event.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                The interface for event in the queue\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            action\n                                        \n                                \n                                \n                                        \n                                            eventId\n                                        \n                                \n                                \n                                        \n                                            repsositoryName\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        action\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        action:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The event action\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        eventId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        eventId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    eventId is the uuid of the ScanEvent entity\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        repsositoryName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        repsositoryName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The respository is scanned\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface EventInterface {\n  /**\n   * eventId is the uuid of the ScanEvent entity\n   */\n  eventId: string;\n  /**\n   * The event action\n   */\n  action: string;\n  /**\n   * The respository is scanned\n   */\n  repsositoryName: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EventQueueConsumer.html":{"url":"classes/EventQueueConsumer.html","title":"class - EventQueueConsumer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EventQueueConsumer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/message-queue/event-queue.consumer.ts\n        \n\n\n            \n                Description\n            \n            \n                The event consumer for the scan event\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                transcode\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(scanEventProcesor: ScanEventProcessor)\n                    \n                \n                        \n                            \n                                Defined in src/message-queue/event-queue.consumer.ts:9\n                            \n                        \n\n                \n                    \n                            The constructor for the scan event consumer\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        scanEventProcesor\n                                                  \n                                                        \n                                                                        ScanEventProcessor\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The processor of the scan event\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        transcode\n                        \n                    \n                \n            \n            \n                \n                    \n                    transcode(job: Job<>)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Process()\n                \n            \n\n            \n                \n                    Defined in src/message-queue/event-queue.consumer.ts:24\n                \n            \n\n\n            \n                \n                    To demand the job to pass to the processor\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    job\n                                    \n                                            Job<>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The job of queue\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        Any data\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Process, Processor } from '@nestjs/bull';\nimport { Job } from 'bull';\nimport { ScanEventProcessor } from '../workers/scan-event.processor';\n\n/**\n * The event consumer for the scan event\n */\n@Processor('scan_event')\nexport class EventQueueConsumer {\n  /**\n   * The constructor for the scan event consumer\n   *\n   * @param scanEventProcesor The processor of the scan event\n   */\n  constructor(private readonly scanEventProcesor: ScanEventProcessor) {}\n\n  /**\n   * To demand the job to pass to the processor\n   *\n   * @param job The job of queue\n   * @returns Any data\n   */\n  @Process()\n  async transcode(job: Job) {\n    await this.scanEventProcesor.process(job.data);\n    return 'Done';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EventQueueModule.html":{"url":"modules/EventQueueModule.html","title":"module - EventQueueModule","body":"\n                   \n\n\n\n\n    Modules\n    EventQueueModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_EventQueueModule\n\n\n\ncluster_EventQueueModule_exports\n\n\n\ncluster_EventQueueModule_providers\n\n\n\ncluster_EventQueueModule_imports\n\n\n\n\nWorkersModule\n\nWorkersModule\n\n\n\nEventQueueModule\n\nEventQueueModule\n\nEventQueueModule -->\n\nWorkersModule->EventQueueModule\n\n\n\n\n\nEventQueueProducer \n\nEventQueueProducer \n\nEventQueueProducer  -->\n\nEventQueueModule->EventQueueProducer \n\n\n\n\n\nEventQueueProducer\n\nEventQueueProducer\n\nEventQueueModule -->\n\nEventQueueProducer->EventQueueModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/message-queue/event-queue.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EventQueueProducer\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            WorkersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            EventQueueProducer\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { BullModule } from '@nestjs/bull';\nimport { Module } from '@nestjs/common';\nimport { WorkersModule } from '../workers/workers.module';\nimport { EventQueueConsumer } from './event-queue.consumer';\nimport { EventQueueProducer } from './event-queue.producer';\n\n@Module({\n  imports: [\n    BullModule.registerQueue({\n      name: 'scan_event',\n    }),\n    WorkersModule,\n  ],\n  controllers: [],\n  providers: [EventQueueProducer, EventQueueConsumer],\n  exports: [EventQueueProducer],\n})\nexport class EventQueueModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EventQueueProducer.html":{"url":"injectables/EventQueueProducer.html","title":"injectable - EventQueueProducer","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EventQueueProducer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/message-queue/event-queue.producer.ts\n        \n\n\n            \n                Description\n            \n            \n                The event producer for the scan event\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addEvent\n                            \n                            \n                                    Private\n                                buildEvent\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(eventQueue: Queue)\n                    \n                \n                        \n                            \n                                Defined in src/message-queue/event-queue.producer.ts:11\n                            \n                        \n\n                \n                    \n                            The constructor for the scan event producer\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        eventQueue\n                                                  \n                                                        \n                                                                    Queue\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The queue\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addEvent\n                        \n                    \n                \n            \n            \n                \naddEvent(data: ScanEvent)\n                \n            \n\n\n            \n                \n                    Defined in src/message-queue/event-queue.producer.ts:25\n                \n            \n\n\n            \n                \n                    To add an event to queue\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                ScanEvent\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The event data\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The queue job\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        buildEvent\n                        \n                    \n                \n            \n            \n                \n                    \n                    buildEvent(data: ScanEvent)\n                \n            \n\n\n            \n                \n                    Defined in src/message-queue/event-queue.producer.ts:36\n                \n            \n\n\n            \n                \n                    To build an event for raw data\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                ScanEvent\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The event data\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         EventInterface\n\n                    \n                    \n                        The constructed event data\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Queue } from 'bull';\nimport { InjectQueue } from '@nestjs/bull';\nimport { EventInterface } from './interfaces/event.interface';\nimport { ScanEvent } from '../modules/scans/entities/scan-event.entity';\n\n/**\n * The event producer for the scan event\n */\n@Injectable()\nexport class EventQueueProducer {\n  /**\n   * The constructor for the scan event producer\n   *\n   * @param eventQueue The queue\n   */\n  constructor(@InjectQueue('scan_event') private eventQueue: Queue) {}\n\n  /**\n   * To add an event to queue\n   *\n   * @param data The event data\n   * @returns The queue job\n   */\n  addEvent(data: ScanEvent) {\n    const event = this.buildEvent(data);\n    return this.eventQueue.add(event, { removeOnComplete: true });\n  }\n\n  /**\n   * To build an event for raw data\n   *\n   * @param data The event data\n   * @returns The constructed event data\n   */\n  private buildEvent(data: ScanEvent): EventInterface {\n    const event: EventInterface = {\n      eventId: data.uuid,\n      repsositoryName: data.repsositoryName,\n      action: 'scan',\n    };\n    return event;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FindOneScanResponseDto.html":{"url":"classes/FindOneScanResponseDto.html","title":"class - FindOneScanResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FindOneScanResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/scans/dto/findOne-scan.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                The result of scan response dto\n\n            \n\n            \n                Extends\n            \n            \n                        CreateScanResponseDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                findings\n                            \n                            \n                                createdDate\n                            \n                            \n                                id\n                            \n                            \n                                queuedAt\n                            \n                            \n                                repsositoryName\n                            \n                            \n                                status\n                            \n                            \n                                updatedDate\n                            \n                            \n                                uuid\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                buildFindings\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(scanEvent: ScanEvent)\n                    \n                \n                        \n                            \n                                Defined in src/modules/scans/dto/findOne-scan.dto.ts:49\n                            \n                        \n\n                \n                    \n                            The constructor for the dto\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        scanEvent\n                                                  \n                                                        \n                                                                        ScanEvent\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The scan event\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        findings\n                        \n                    \n                \n            \n                \n                    \n                        Type :         FindingResponseDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/scans/dto/findOne-scan.dto.ts:49\n                        \n                    \n\n            \n                \n                    The vulnerabilities\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createdDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreateScanResponseDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreateScanResponseDto:32\n\n                        \n                    \n\n            \n                \n                    createdDate is a datetime and generated when insert a new record\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreateScanResponseDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreateScanResponseDto:26\n\n                        \n                    \n\n            \n                \n                    id is a primary key and automatic increase when insert a new record\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        queuedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreateScanResponseDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreateScanResponseDto:61\n\n                        \n                    \n\n            \n                \n                    The datetime when set the queued status\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        repsositoryName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreateScanResponseDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreateScanResponseDto:49\n\n                        \n                    \n\n            \n                \n                    The respository name\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreateScanResponseDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreateScanResponseDto:55\n\n                        \n                    \n\n            \n                \n                    The status of the scan event, it should be changed from 'queued' -> 'processing' -> 'success' or 'failed'\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreateScanResponseDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreateScanResponseDto:38\n\n                        \n                    \n\n            \n                \n                    updatedDate is a datetime and changed when any update happen\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        uuid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreateScanResponseDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreateScanResponseDto:43\n\n                        \n                    \n\n            \n                \n                    The unique id, it is exposed to retrieve the scan event and add to the queue\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        buildFindings\n                        \n                    \n                \n            \n            \n                \n                    \n                    buildFindings(vulnerabilities)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/scans/dto/findOne-scan.dto.ts:67\n                \n            \n\n\n            \n                \n                    To build the vulnerabilities follow the template\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    vulnerabilities\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The vulnerabilities\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         FindingResponseDto[]\n\n                    \n                    \n                        The list of format vulnerabilities\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { ScanEvent } from '../entities/scan-event.entity';\nimport { CreateScanResponseDto } from './create-scan.dto';\n\n/**\n * The vulnerability location\n */\nclass Location {\n  /**\n   * The vulnerability path\n   */\n  @ApiProperty()\n  path: string;\n\n  /**\n   * The vulnerability position\n   */\n  @ApiProperty()\n  positions: {\n    begin: {\n      line: string;\n    };\n  };\n}\n/**\n * The vulnerability response Dto\n */\nclass FindingResponseDto {\n  /**\n   * The vulnerability type\n   */\n  @ApiProperty()\n  type: 'string';\n  /**\n   * The vulnerability location\n   */\n  @ApiProperty()\n  location: Location;\n}\n\n/**\n * The result of scan response dto\n */\nexport class FindOneScanResponseDto extends CreateScanResponseDto {\n  /**\n   * The vulnerabilities\n   */\n  @ApiProperty()\n  findings: FindingResponseDto[];\n\n  /**\n   * The constructor for the dto\n   *\n   * @param scanEvent The scan event\n   */\n  constructor(scanEvent: ScanEvent) {\n    super(scanEvent);\n    this.findings = this.buildFindings(scanEvent.vulnerabilities);\n  }\n\n  /**\n   * To build the vulnerabilities follow the template\n   *\n   * @param vulnerabilities The vulnerabilities\n   * @returns The list of format vulnerabilities\n   */\n  private buildFindings(vulnerabilities): FindingResponseDto[] {\n    return vulnerabilities.map((vulnerability) => {\n      return {\n        type: 'sast',\n        location: {\n          path: vulnerability.path,\n          positions: {\n            begin: {\n              line: vulnerability.line,\n            },\n          },\n        },\n      };\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FindingResponseDto.html":{"url":"classes/FindingResponseDto.html","title":"class - FindingResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FindingResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/scans/dto/findOne-scan.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                The vulnerability response Dto\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                location\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        location\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Location\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/scans/dto/findOne-scan.dto.ts:38\n                        \n                    \n\n            \n                \n                    The vulnerability location\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/scans/dto/findOne-scan.dto.ts:33\n                        \n                    \n\n            \n                \n                    The vulnerability type\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { ScanEvent } from '../entities/scan-event.entity';\nimport { CreateScanResponseDto } from './create-scan.dto';\n\n/**\n * The vulnerability location\n */\nclass Location {\n  /**\n   * The vulnerability path\n   */\n  @ApiProperty()\n  path: string;\n\n  /**\n   * The vulnerability position\n   */\n  @ApiProperty()\n  positions: {\n    begin: {\n      line: string;\n    };\n  };\n}\n/**\n * The vulnerability response Dto\n */\nclass FindingResponseDto {\n  /**\n   * The vulnerability type\n   */\n  @ApiProperty()\n  type: 'string';\n  /**\n   * The vulnerability location\n   */\n  @ApiProperty()\n  location: Location;\n}\n\n/**\n * The result of scan response dto\n */\nexport class FindOneScanResponseDto extends CreateScanResponseDto {\n  /**\n   * The vulnerabilities\n   */\n  @ApiProperty()\n  findings: FindingResponseDto[];\n\n  /**\n   * The constructor for the dto\n   *\n   * @param scanEvent The scan event\n   */\n  constructor(scanEvent: ScanEvent) {\n    super(scanEvent);\n    this.findings = this.buildFindings(scanEvent.vulnerabilities);\n  }\n\n  /**\n   * To build the vulnerabilities follow the template\n   *\n   * @param vulnerabilities The vulnerabilities\n   * @returns The list of format vulnerabilities\n   */\n  private buildFindings(vulnerabilities): FindingResponseDto[] {\n    return vulnerabilities.map((vulnerability) => {\n      return {\n        type: 'sast',\n        location: {\n          path: vulnerability.path,\n          positions: {\n            begin: {\n              line: vulnerability.line,\n            },\n          },\n        },\n      };\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Location.html":{"url":"classes/Location.html","title":"class - Location","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Location\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/scans/dto/findOne-scan.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                The vulnerability location\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                path\n                            \n                            \n                                positions\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        path\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/scans/dto/findOne-scan.dto.ts:13\n                        \n                    \n\n            \n                \n                    The vulnerability path\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        positions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/scans/dto/findOne-scan.dto.ts:19\n                        \n                    \n\n            \n                \n                    The vulnerability position\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { ScanEvent } from '../entities/scan-event.entity';\nimport { CreateScanResponseDto } from './create-scan.dto';\n\n/**\n * The vulnerability location\n */\nclass Location {\n  /**\n   * The vulnerability path\n   */\n  @ApiProperty()\n  path: string;\n\n  /**\n   * The vulnerability position\n   */\n  @ApiProperty()\n  positions: {\n    begin: {\n      line: string;\n    };\n  };\n}\n/**\n * The vulnerability response Dto\n */\nclass FindingResponseDto {\n  /**\n   * The vulnerability type\n   */\n  @ApiProperty()\n  type: 'string';\n  /**\n   * The vulnerability location\n   */\n  @ApiProperty()\n  location: Location;\n}\n\n/**\n * The result of scan response dto\n */\nexport class FindOneScanResponseDto extends CreateScanResponseDto {\n  /**\n   * The vulnerabilities\n   */\n  @ApiProperty()\n  findings: FindingResponseDto[];\n\n  /**\n   * The constructor for the dto\n   *\n   * @param scanEvent The scan event\n   */\n  constructor(scanEvent: ScanEvent) {\n    super(scanEvent);\n    this.findings = this.buildFindings(scanEvent.vulnerabilities);\n  }\n\n  /**\n   * To build the vulnerabilities follow the template\n   *\n   * @param vulnerabilities The vulnerabilities\n   * @returns The list of format vulnerabilities\n   */\n  private buildFindings(vulnerabilities): FindingResponseDto[] {\n    return vulnerabilities.map((vulnerability) => {\n      return {\n        type: 'sast',\n        location: {\n          path: vulnerability.path,\n          positions: {\n            begin: {\n              line: vulnerability.line,\n            },\n          },\n        },\n      };\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/ScanEvent.html":{"url":"entities/ScanEvent.html","title":"entity - ScanEvent","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  ScanEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/scans/entities/scan-event.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                The scan event entity\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                failedAt\n                            \n                            \n                                    Optional\n                                processedAt\n                            \n                            \n                                    Optional\n                                queuedAt\n                            \n                            \n                                repsositoryName\n                            \n                            \n                                status\n                            \n                            \n                                    Optional\n                                successAt\n                            \n                            \n                                uuid\n                            \n                            \n                                vulnerabilities\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        failedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/scans/entities/scan-event.entity.ts:54\n                        \n                    \n\n            \n                \n                    The datetime when set the failed status\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        processedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/scans/entities/scan-event.entity.ts:42\n                        \n                    \n\n            \n                \n                    The datetime when set the processing status\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        queuedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/scans/entities/scan-event.entity.ts:36\n                        \n                    \n\n            \n                \n                    The datetime when set the queued status\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        repsositoryName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/scans/entities/scan-event.entity.ts:21\n                        \n                    \n\n            \n                \n                    The respository name\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({enum: undefined, default: 'queued'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/scans/entities/scan-event.entity.ts:30\n                        \n                    \n\n            \n                \n                    The status of the scan event, it should be changed from 'queued' -> 'processing' -> 'success' or 'failed'\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        successAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/scans/entities/scan-event.entity.ts:48\n                        \n                    \n\n            \n                \n                    The datetime when set the success status\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        uuid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Index()@Column({generated: 'uuid'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/scans/entities/scan-event.entity.ts:15\n                        \n                    \n\n            \n                \n                    The unique id, it is exposed to retrieve the scan event and add to the queue\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        vulnerabilities\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Vulnerability[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, vulnerability => vulnerability.scanEvent)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/scans/entities/scan-event.entity.ts:60\n                        \n                    \n\n            \n                \n                    The vulnerabilities found when scan the repository\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, Index, OneToMany } from 'typeorm';\nimport { BaseSchema } from '../../../common/base-schema.entity';\nimport { Vulnerability } from './vulnerability.entity';\n\n/**\n * The scan event entity\n */\n@Entity({ name: 'scan_events' })\nexport class ScanEvent extends BaseSchema {\n  /**\n   * The unique id, it is exposed to retrieve the scan event and add to the queue\n   */\n  @Index()\n  @Column({ generated: 'uuid' })\n  uuid!: string;\n\n  /**\n   * The respository name\n   */\n  @Column()\n  repsositoryName!: string;\n\n  /**\n   * The status of the scan event, it should be changed from 'queued' -> 'processing' -> 'success' or 'failed'\n   */\n  @Column({\n    enum: ['queued', 'processing', 'success', 'failed'],\n    default: 'queued',\n  })\n  status!: string;\n\n  /**\n   * The datetime when set the queued status\n   */\n  @Column()\n  queuedAt?: Date;\n\n  /**\n   * The datetime when set the processing status\n   */\n  @Column({ nullable: true })\n  processedAt?: Date;\n\n  /**\n   * The datetime when set the success status\n   */\n  @Column({ nullable: true })\n  successAt?: Date;\n\n  /**\n   * The datetime when set the failed status\n   */\n  @Column({ nullable: true })\n  failedAt?: Date;\n\n  /**\n   * The vulnerabilities found when scan the repository\n   */\n  @OneToMany(() => Vulnerability, (vulnerability) => vulnerability.scanEvent)\n  vulnerabilities: Vulnerability[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ScanEventContext.html":{"url":"injectables/ScanEventContext.html","title":"injectable - ScanEventContext","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ScanEventContext\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/scans/contexts/scan-event.context.ts\n        \n\n\n            \n                Description\n            \n            \n                The context for scan event entity\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                completeEvent\n                            \n                            \n                                create\n                            \n                            \n                                createVulnerability\n                            \n                            \n                                findOne\n                            \n                            \n                                    Async\n                                markAsFailedEvent\n                            \n                            \n                                    Async\n                                processEvent\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(scanEventRepository: Repository, vulnerabilityRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/scans/contexts/scan-event.context.ts:12\n                            \n                        \n\n                \n                    \n                            The constructor for the scan event context\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        scanEventRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The repository of scan event\n\n                                                        \n                                                \n                                                \n                                                        vulnerabilityRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The repository of vulnerability\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        completeEvent\n                        \n                    \n                \n            \n            \n                \n                    \n                    completeEvent(event: ScanEvent)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/scans/contexts/scan-event.context.ts:56\n                \n            \n\n\n            \n                \n                    To change state from 'processing' to 'success'\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                                ScanEvent\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The scan event\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createScanDto: CreateScanRequestDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/scans/contexts/scan-event.context.ts:32\n                \n            \n\n\n            \n                \n                    To create a scan event record\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    createScanDto\n                                    \n                                                CreateScanRequestDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The scan input data\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        The scan event\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createVulnerability\n                        \n                    \n                \n            \n            \n                \ncreateVulnerability(scanEvent: ScanEvent, data)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/scans/contexts/scan-event.context.ts:107\n                \n            \n\n\n            \n                \n                    To create a vulnerability\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    scanEvent\n                                    \n                                                ScanEvent\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The scan event\n\n                                    \n                                \n                                \n                                    data\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The vulnerability input data\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        The vulnerability\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(uuid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/scans/contexts/scan-event.context.ts:91\n                \n            \n\n\n            \n                \n                    To fetch the scan event and related vulnerabilities\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    uuid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The unique id of the scan event\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        The scan event\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        markAsFailedEvent\n                        \n                    \n                \n            \n            \n                \n                    \n                    markAsFailedEvent(event: ScanEvent)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/scans/contexts/scan-event.context.ts:68\n                \n            \n\n\n            \n                \n                    To change state from 'processing' to 'failed'\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                                ScanEvent\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The scan event\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        processEvent\n                        \n                    \n                \n            \n            \n                \n                    \n                    processEvent(event: ScanEvent)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/scans/contexts/scan-event.context.ts:44\n                \n            \n\n\n            \n                \n                    To change state from 'queued' to 'processing'\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                                ScanEvent\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The scan event\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(event: ScanEvent, data)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/scans/contexts/scan-event.context.ts:81\n                \n            \n\n\n            \n                \n                    To update the change\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                                ScanEvent\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The scan event\n\n                                    \n                                \n                                \n                                    data\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The change data\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { CreateScanRequestDto } from '../dto/create-scan.dto';\nimport { ScanEvent } from '../entities/scan-event.entity';\nimport { Vulnerability } from '../entities/vulnerability.entity';\n\n/**\n * The context for scan event entity\n */\n@Injectable()\nexport class ScanEventContext {\n  /**\n   * The constructor for the scan event context\n   *\n   * @param scanEventRepository The repository of scan event\n   * @param vulnerabilityRepository The repository of vulnerability\n   */\n  constructor(\n    @InjectRepository(ScanEvent)\n    private scanEventRepository: Repository,\n    @InjectRepository(Vulnerability)\n    private vulnerabilityRepository: Repository,\n  ) {}\n\n  /**\n   * To create a scan event record\n   *\n   * @param createScanDto The scan input data\n   * @returns The scan event\n   */\n  create(createScanDto: CreateScanRequestDto): Promise {\n    return this.scanEventRepository.save({\n      ...createScanDto,\n      queuedAt: new Date().toISOString(),\n    });\n  }\n\n  /**\n   * To change state from 'queued' to 'processing'\n   *\n   * @param event The scan event\n   */\n  async processEvent(event: ScanEvent) {\n    await this.update(event, {\n      status: 'processing',\n      processedAt: new Date().toISOString(),\n    });\n  }\n\n  /**\n   * To change state from 'processing' to 'success'\n   *\n   * @param event The scan event\n   */\n  async completeEvent(event: ScanEvent) {\n    await this.update(event, {\n      status: 'success',\n      successAt: new Date().toISOString(),\n    });\n  }\n\n  /**\n   * To change state from 'processing' to 'failed'\n   *\n   * @param event The scan event\n   */\n  async markAsFailedEvent(event: ScanEvent) {\n    await this.update(event, {\n      status: 'failed',\n      failedAt: new Date().toISOString(),\n    });\n  }\n\n  /**\n   * To update the change\n   *\n   * @param event The scan event\n   * @param data The change data\n   */\n  async update(event: ScanEvent, data): Promise {\n    await this.scanEventRepository.update(event.id, data);\n  }\n\n  /**\n   * To fetch the scan event and related vulnerabilities\n   *\n   * @param uuid The unique id of the scan event\n   * @returns The scan event\n   */\n  findOne(uuid: string): Promise {\n    return this.scanEventRepository.findOne({\n      where: { uuid },\n      relations: {\n        vulnerabilities: true,\n      },\n    });\n  }\n\n  /**\n   * To create a vulnerability\n   *\n   * @param scanEvent The scan event\n   * @param data The vulnerability input data\n   * @returns The vulnerability\n   */\n  createVulnerability(scanEvent: ScanEvent, data): Promise {\n    return this.vulnerabilityRepository.save({\n      ...data,\n      scanEvent: scanEvent,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ScanEventProcessor.html":{"url":"injectables/ScanEventProcessor.html","title":"injectable - ScanEventProcessor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ScanEventProcessor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/workers/scan-event.processor.ts\n        \n\n\n            \n                Description\n            \n            \n                The scan event processor, to proceed the event from queue\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                utilsService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                buildPath\n                            \n                            \n                                    Async\n                                process\n                            \n                            \n                                    Private\n                                    Async\n                                scan\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(scanEventContext: ScanEventContext, httpService: HttpService)\n                    \n                \n                        \n                            \n                                Defined in src/workers/scan-event.processor.ts:16\n                            \n                        \n\n                \n                    \n                            The constructor for the scan event processor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        scanEventContext\n                                                  \n                                                        \n                                                                        ScanEventContext\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The scan event context\n\n                                                        \n                                                \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The http service\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        buildPath\n                        \n                    \n                \n            \n            \n                \n                    \n                    buildPath()\n                \n            \n\n\n            \n                \n                    Defined in src/workers/scan-event.processor.ts:71\n                \n            \n\n\n            \n                \n                    To simulate a file path with the random names\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A random path\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        process\n                        \n                    \n                \n            \n            \n                \n                    \n                    process(event: any)\n                \n            \n\n\n            \n                \n                    Defined in src/workers/scan-event.processor.ts:36\n                \n            \n\n\n            \n                \n                    The process function will scan the repository from the event, then save the result after that\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The event from queue\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        scan\n                        \n                    \n                \n            \n            \n                \n                    \n                    scan(event: ScanEvent)\n                \n            \n\n\n            \n                \n                    Defined in src/workers/scan-event.processor.ts:54\n                \n            \n\n\n            \n                \n                    To scan the repository and save the vulnerabilities\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                                ScanEvent\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The scan event entity\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Number of vulnerabilities\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        utilsService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UtilsService\n\n                    \n                \n                    \n                        \n                                Defined in src/workers/scan-event.processor.ts:16\n                        \n                    \n\n            \n                \n                    The utility service\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable } from '@nestjs/common';\nimport { HttpService } from '@nestjs/axios';\nimport { lastValueFrom, map } from 'rxjs';\nimport { UtilsService } from '../common/utils.service';\nimport { ScanEventContext } from '../modules/scans/contexts/scan-event.context';\nimport { ScanEvent } from '../modules/scans/entities/scan-event.entity';\n\n/**\n * The scan event processor, to proceed the event from queue\n */\n@Injectable()\nexport class ScanEventProcessor {\n  /**\n   * The utility service\n   */\n  utilsService: UtilsService;\n  /**\n   * The constructor for the scan event processor\n   *\n   * @param scanEventContext The scan event context\n   * @param httpService The http service\n   */\n  constructor(\n    @Inject(forwardRef(() => ScanEventContext))\n    private readonly scanEventContext: ScanEventContext,\n    private readonly httpService: HttpService,\n  ) {\n    this.utilsService = UtilsService.getInstance();\n  }\n\n  /**\n   * The process function will scan the repository from the event, then save the result after that\n   *\n   * @param event The event from queue\n   */\n  async process(event: any): Promise {\n    const scanEvent = await this.scanEventContext.findOne(event.eventId);\n    await this.scanEventContext.processEvent(scanEvent);\n    const vulnerabilityNum = await this.scan(scanEvent);\n\n    if (vulnerabilityNum > 0) {\n      this.scanEventContext.markAsFailedEvent(scanEvent);\n    } else {\n      this.scanEventContext.completeEvent(scanEvent);\n    }\n  }\n\n  /**\n   * To scan the repository and save the vulnerabilities\n   *\n   * @param event The scan event entity\n   * @returns Number of vulnerabilities\n   */\n  private async scan(event: ScanEvent): Promise {\n    // Sleep to simulate the scanning code process\n    await this.utilsService.randomSleep();\n    const vulnerabilityNum = this.utilsService.randomInteger(5);\n\n    for (let index = 0; index  {\n    return lastValueFrom(\n      this.httpService\n        .get('https://names.drycodes.com/10?nameOptions=funnyWords')\n        .pipe(map((data) => (data.data as Array).join('/'))),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ScansController.html":{"url":"controllers/ScansController.html","title":"controller - ScansController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ScansController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/scans/scans.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /api/scan\n            \n\n\n            \n                Description\n            \n            \n                Scan controller\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createScanDto: CreateScanRequestDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@View(CreateScanResponseDto)@ApiExtraModels(CreateScanResponseDto)@BaseApiResponse(CreateScanResponseDto)\n                \n            \n\n            \n                \n                    Defined in src/modules/scans/scans.controller.ts:34\n                \n            \n\n\n            \n                \n                    To trigger scan the repository\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    createScanDto\n                                    \n                                                CreateScanRequestDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The creation scan dto\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        The scan json data\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@View(FindOneScanResponseDto)@ApiExtraModels(FindOneScanResponseDto)@BaseApiResponse(FindOneScanResponseDto)\n                \n            \n\n            \n                \n                    Defined in src/modules/scans/scans.controller.ts:49\n                \n            \n\n\n            \n                \n                    To fetch the detail scan\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The unique id of the scan event\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        The detail scan event json data\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Param } from '@nestjs/common';\nimport { ScansService } from './scans.service';\nimport {\n  CreateScanRequestDto,\n  CreateScanResponseDto,\n} from './dto/create-scan.dto';\nimport { FindOneScanResponseDto } from './dto/findOne-scan.dto';\nimport { ApiExtraModels } from '@nestjs/swagger';\nimport { BaseApiResponse } from '../../common/decorators/base-api-response.decorator';\nimport { View } from '../../common/decorators/view.decorator';\n\n/**\n * Scan controller\n */\n@Controller('/api/scan')\nexport class ScansController {\n  /**\n   * The constructor for the scan controller\n   *\n   * @param scansService The scan service\n   */\n  constructor(private readonly scansService: ScansService) {}\n\n  /**\n   * To trigger scan the repository\n   *\n   * @param createScanDto The creation scan dto\n   * @returns The scan json data\n   */\n  @Post()\n  @View(CreateScanResponseDto)\n  @ApiExtraModels(CreateScanResponseDto)\n  @BaseApiResponse(CreateScanResponseDto)\n  async create(@Body() createScanDto: CreateScanRequestDto) {\n    const result = await this.scansService.create(createScanDto);\n    return { result, message: 'Scan is processing' };\n  }\n\n  /**\n   * To fetch the detail scan\n   *\n   * @param id The unique id of the scan event\n   * @returns The detail scan event json data\n   */\n  @Get(':id')\n  @View(FindOneScanResponseDto)\n  @ApiExtraModels(FindOneScanResponseDto)\n  @BaseApiResponse(FindOneScanResponseDto)\n  async findOne(@Param('id') id: string) {\n    const result = await this.scansService.findOne(id);\n    return { result, message: 'The detail of scan' };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ScansModule.html":{"url":"modules/ScansModule.html","title":"module - ScansModule","body":"\n                   \n\n\n\n\n    Modules\n    ScansModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ScansModule\n\n\n\ncluster_ScansModule_exports\n\n\n\ncluster_ScansModule_providers\n\n\n\ncluster_ScansModule_imports\n\n\n\n\nCacheWrapperModule\n\nCacheWrapperModule\n\n\n\nScansModule\n\nScansModule\n\nScansModule -->\n\nCacheWrapperModule->ScansModule\n\n\n\n\n\nScanEventContext \n\nScanEventContext \n\nScanEventContext  -->\n\nScansModule->ScanEventContext \n\n\n\n\n\nScanEventContext\n\nScanEventContext\n\nScansModule -->\n\nScanEventContext->ScansModule\n\n\n\n\n\nScansService\n\nScansService\n\nScansModule -->\n\nScansService->ScansModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/scans/scans.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ScanEventContext\n                        \n                        \n                            ScansService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ScansController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CacheWrapperModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ScanEventContext\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { ScansService } from './scans.service';\nimport { ScansController } from './scans.controller';\nimport { ScanEventContext } from './contexts/scan-event.context';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { ScanEvent } from './entities/scan-event.entity';\nimport { Vulnerability } from './entities/vulnerability.entity';\nimport { EventQueueModule } from '../../message-queue/event-queue.module';\nimport { CacheWrapperModule } from '../../cache/cache-wrapper.module';\n\n@Module({\n  imports: [\n    CacheWrapperModule,\n    forwardRef(() => EventQueueModule),\n    TypeOrmModule.forFeature([ScanEvent, Vulnerability]),\n  ],\n  controllers: [ScansController],\n  providers: [ScansService, ScanEventContext],\n  exports: [ScanEventContext],\n})\nexport class ScansModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ScansService.html":{"url":"injectables/ScansService.html","title":"injectable - ScansService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ScansService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/scans/scans.service.ts\n        \n\n\n            \n                Description\n            \n            \n                The scan services\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(eventQueueProducer: EventQueueProducer, scanEventContext: ScanEventContext, cacheWrapperService: CacheWrapperService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/scans/scans.service.ts:13\n                            \n                        \n\n                \n                    \n                            The constructor for the scan service\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        eventQueueProducer\n                                                  \n                                                        \n                                                                        EventQueueProducer\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The event producer\n\n                                                        \n                                                \n                                                \n                                                        scanEventContext\n                                                  \n                                                        \n                                                                        ScanEventContext\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The event context\n\n                                                        \n                                                \n                                                \n                                                        cacheWrapperService\n                                                  \n                                                        \n                                                                        CacheWrapperService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createScanDto: CreateScanRequestDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/scans/scans.service.ts:33\n                \n            \n\n\n            \n                \n                    To create and trigger scan for the repository\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    createScanDto\n                                    \n                                                CreateScanRequestDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The creation scan dto\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        The scan event\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/scans/scans.service.ts:45\n                \n            \n\n\n            \n                \n                    To fetch the detail scan\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The unique id of the scan event\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        The scan event\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable } from '@nestjs/common';\nimport { CacheWrapperService } from '../../cache/cache-wrapper.service';\nimport { longTtl } from '../../common/constants';\nimport { EventQueueProducer } from '../../message-queue/event-queue.producer';\nimport { ScanEventContext } from './contexts/scan-event.context';\nimport { CreateScanRequestDto } from './dto/create-scan.dto';\nimport { ScanEvent } from './entities/scan-event.entity';\n\n/**\n * The scan services\n */\n@Injectable()\nexport class ScansService {\n  /**\n   * The constructor for the scan service\n   *\n   * @param eventQueueProducer The event producer\n   * @param scanEventContext The event context\n   */\n  constructor(\n    @Inject(forwardRef(() => EventQueueProducer))\n    private readonly eventQueueProducer: EventQueueProducer,\n    private readonly scanEventContext: ScanEventContext,\n    private readonly cacheWrapperService: CacheWrapperService,\n  ) {}\n\n  /**\n   * To create and trigger scan for the repository\n   *\n   * @param createScanDto The creation scan dto\n   * @returns The scan event\n   */\n  async create(createScanDto: CreateScanRequestDto) {\n    const event = await this.scanEventContext.create(createScanDto);\n    this.eventQueueProducer.addEvent(event);\n    return event;\n  }\n\n  /**\n   * To fetch the detail scan\n   *\n   * @param id The unique id of the scan event\n   * @returns The scan event\n   */\n  async findOne(id: string) {\n    let scanEvent = await this.cacheWrapperService.get(\n      `scanEven_${id}`,\n    );\n\n    if (!scanEvent) {\n      scanEvent = await this.scanEventContext.findOne(id);\n      if (\n        scanEvent &&\n        (scanEvent.status === 'success' || scanEvent.status === 'failed')\n      ) {\n        this.cacheWrapperService.set(`scanEven_${id}`, scanEvent, longTtl);\n      }\n      return scanEvent;\n    }\n    return scanEvent;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UtilsService.html":{"url":"classes/UtilsService.html","title":"class - UtilsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UtilsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/utils.service.ts\n        \n\n\n            \n                Description\n            \n            \n                The utility service\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Static\n                                instance\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                getInstance\n                            \n                            \n                                randomInteger\n                            \n                            \n                                randomSleep\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                        instance\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UtilsService\n\n                    \n                \n                    \n                        \n                                Defined in src/common/utils.service.ts:8\n                        \n                    \n\n            \n                \n                    The UtilsService instance\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        getInstance\n                        \n                    \n                \n            \n            \n                \n                    \n                    getInstance()\n                \n            \n\n\n            \n                \n                    Defined in src/common/utils.service.ts:15\n                \n            \n\n\n            \n                \n                    To control access to the instance\n\n\n                    \n                    \n                    \n                        Returns :         UtilsService\n\n                    \n                    \n                        The instance\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        randomInteger\n                        \n                    \n                \n            \n            \n                \nrandomInteger(maxNumber)\n                \n            \n\n\n            \n                \n                    Defined in src/common/utils.service.ts:38\n                \n            \n\n\n            \n                \n                    To generate a random number from 0 to the max input number\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    maxNumber\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the max number for random range\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        randomSleep\n                        \n                    \n                \n            \n            \n                \nrandomSleep(inSeconds: number)\n                \n            \n\n\n            \n                \n                    Defined in src/common/utils.service.ts:29\n                \n            \n\n\n            \n                \n                    To sleep the current process in random seconds in range from 1 to an input number,\nwith default the input number is 10 seconds\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    inSeconds\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        10\n                                    \n\n                                    \n                                        the max range of sleep\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class UtilsService {\n  /**\n   * The UtilsService instance\n   */\n  private static instance: UtilsService;\n\n  /**\n   * To control access to the instance\n   *\n   * @returns The instance\n   */\n  public static getInstance(): UtilsService {\n    if (!this.instance) {\n      this.instance = new UtilsService();\n    }\n\n    return this.instance;\n  }\n  /**\n   *\n   * To sleep the current process in random seconds in range from 1 to an input number,\n   * with default the input number is 10 seconds\n   *\n   * @param {number} inSeconds the max range of sleep\n   */\n  randomSleep(inSeconds = 10): Promise {\n    const time = (Math.floor(Math.random() * inSeconds) + 1) * 1000;\n    return new Promise((resolve) => setTimeout(resolve, time));\n  }\n  /**\n   * To generate a random number from 0 to the max input number\n   *\n   * @param maxNumber the max number for random range\n   */\n  randomInteger(maxNumber): number {\n    return Math.floor(Math.random() * (maxNumber + 1));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ViewInterceptor.html":{"url":"classes/ViewInterceptor.html","title":"class - ViewInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ViewInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/view.interceptor.ts\n        \n\n\n            \n                Description\n            \n            \n                The interceptor for view to handle and wrap up the response for the controller\n\n            \n\n\n            \n                Implements\n            \n            \n                        NestInterceptor\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/common/interceptors/view.interceptor.ts:10\n                            \n                        \n\n                \n                    \n                            The constructor for the view interceptor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The reflector of Nest\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/view.interceptor.ts:25\n                \n            \n\n\n            \n                \n                    To intercept the response to construct the response from View\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The context from the request\n\n                                    \n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The call handler for the response\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        The observable of response\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { CallHandler, ExecutionContext, NestInterceptor } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { instanceToPlain } from 'class-transformer';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n/**\n * The interceptor for view to handle and wrap up the response for the controller\n */\nexport class ViewInterceptor implements NestInterceptor {\n  /**\n   * The constructor for the view interceptor\n   *\n   * @param reflector The reflector of Nest\n   */\n  constructor(private reflector: Reflector) {}\n\n  /**\n   * To intercept the response to construct the response from View\n   *\n   * @param context The context from the request\n   * @param next The call handler for the response\n   * @returns The observable of response\n   */\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    const view = this.reflector.get('view', context.getHandler());\n\n    if (!view) {\n      return next.handle();\n    }\n\n    return next.handle().pipe(\n      map((data) => {\n        const viewInstance = new view(data.result);\n        return {\n          statusCode: context.switchToHttp().getResponse().statusCode,\n          message: data.message,\n          data: instanceToPlain(viewInstance),\n        };\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Vulnerability.html":{"url":"entities/Vulnerability.html","title":"entity - Vulnerability","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Vulnerability\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/scans/entities/vulnerability.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                The vulnerability entity\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                line\n                            \n                            \n                                path\n                            \n                            \n                                scanEvent\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        line\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/scans/entities/vulnerability.entity.ts:20\n                        \n                    \n\n            \n                \n                    The line where the vulnerability is found\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        path\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/scans/entities/vulnerability.entity.ts:14\n                        \n                    \n\n            \n                \n                    The path where the vulnerability is found\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        scanEvent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ScanEvent\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Index()@ManyToOne(undefined, scanEvent => scanEvent.vulnerabilities)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/scans/entities/vulnerability.entity.ts:27\n                        \n                    \n\n            \n                \n                    The scan event of the vulnerability\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, Index, ManyToOne } from 'typeorm';\nimport { BaseSchema } from '../../../common/base-schema.entity';\nimport { ScanEvent } from './scan-event.entity';\n\n/**\n * The vulnerability entity\n */\n@Entity({ name: 'vulnerabilities' })\nexport class Vulnerability extends BaseSchema {\n  /**\n   * The path where the vulnerability is found\n   */\n  @Column()\n  path!: string;\n\n  /**\n   * The line where the vulnerability is found\n   */\n  @Column()\n  line!: number;\n\n  /**\n   * The scan event of the vulnerability\n   */\n  @Index()\n  @ManyToOne(() => ScanEvent, (scanEvent) => scanEvent.vulnerabilities)\n  scanEvent: ScanEvent;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/WorkersModule.html":{"url":"modules/WorkersModule.html","title":"module - WorkersModule","body":"\n                   \n\n\n\n\n    Modules\n    WorkersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_WorkersModule\n\n\n\ncluster_WorkersModule_exports\n\n\n\ncluster_WorkersModule_providers\n\n\n\ncluster_WorkersModule_imports\n\n\n\n\nScansModule\n\nScansModule\n\n\n\nWorkersModule\n\nWorkersModule\n\nWorkersModule -->\n\nScansModule->WorkersModule\n\n\n\n\n\nScanEventProcessor \n\nScanEventProcessor \n\nScanEventProcessor  -->\n\nWorkersModule->ScanEventProcessor \n\n\n\n\n\nScanEventProcessor\n\nScanEventProcessor\n\nWorkersModule -->\n\nScanEventProcessor->WorkersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/workers/workers.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ScanEventProcessor\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ScansModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ScanEventProcessor\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { HttpModule } from '@nestjs/axios';\nimport { Module } from '@nestjs/common';\nimport { ScansModule } from '../modules/scans/scans.module';\nimport { ScanEventProcessor } from './scan-event.processor';\n\n@Module({\n  imports: [HttpModule, ScansModule],\n  providers: [ScanEventProcessor],\n  exports: [ScanEventProcessor],\n})\nexport class WorkersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/cache/cache-wrapper.service.ts\n            \n            injectable\n            CacheWrapperService\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/common/base-schema.entity.ts\n            \n            class\n            BaseSchema\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/common/constants.ts\n            \n            variable\n            longTtl\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/common/decorators/base-api-response.decorator.ts\n            \n            variable\n            BaseApiResponse\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/common/decorators/view.decorator.ts\n            \n            variable\n            View\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/common/interceptors/view.interceptor.ts\n            \n            class\n            ViewInterceptor\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/common/utils.service.ts\n            \n            class\n            UtilsService\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/database/ormconfig.ts\n            \n            variable\n            dataSource\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/message-queue/event-queue.consumer.ts\n            \n            class\n            EventQueueConsumer\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/message-queue/event-queue.producer.ts\n            \n            injectable\n            EventQueueProducer\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/message-queue/interfaces/event.interface.ts\n            \n            interface\n            EventInterface\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/mock/cache.mock.ts\n            \n            variable\n            cacheMock\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/mock/queue.mock.ts\n            \n            variable\n            queueMock\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/mock/repository.mock.factory.ts\n            \n            variable\n            repositoryMockFactory\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/scans/contexts/scan-event.context.ts\n            \n            injectable\n            ScanEventContext\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/modules/scans/dto/create-scan.dto.ts\n            \n            class\n            CreateScanRequestDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/modules/scans/dto/create-scan.dto.ts\n            \n            class\n            CreateScanResponseDto\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/modules/scans/dto/findOne-scan.dto.ts\n            \n            class\n            FindingResponseDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/scans/dto/findOne-scan.dto.ts\n            \n            class\n            FindOneScanResponseDto\n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                src/modules/scans/dto/findOne-scan.dto.ts\n            \n            class\n            Location\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/scans/entities/scan-event.entity.ts\n            \n            entity\n            ScanEvent\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/scans/entities/vulnerability.entity.ts\n            \n            entity\n            Vulnerability\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/scans/scans.controller.ts\n            \n            controller\n            ScansController\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/scans/scans.service.ts\n            \n            injectable\n            ScansService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/workers/scan-event.processor.ts\n            \n            injectable\n            ScanEventProcessor\n            \n                100 %\n                (6/6)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.19\n        \n            @nestjs/axios : ^2.0.0\n        \n            @nestjs/bull : ^0.6.2\n        \n            @nestjs/cli : ^9.0.0\n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/config : ^2.2.0\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/platform-express : ^9.0.0\n        \n            @nestjs/swagger : ^6.2.1\n        \n            @nestjs/typeorm : ^9.0.1\n        \n            axios : ^1.3.2\n        \n            bull : ^4.10.2\n        \n            cache-manager : ^5.1.6\n        \n            cache-manager-redis-store : ^2.0.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            pg : ^8.8.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            swagger-ui-express : ^4.6.0\n        \n            typeorm : ^0.3.11\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                    To bootstrap the application\n\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nCode Scanning\nDescription\nA server-side application is build on the Nestjs framework to simulate scanning code of a repository.\nThe scan process in real life will take time to process, so the process will do as a background job.\nFeatures\n\nCreate a scan event through POST /api/scan\nGet the scan result through GET /api/scan/:uuid\n\nRequirements\n\nNodejs prefer v19.2.0\nDocker for Mac\n\nInstallation\n\nInstall dependencies\n\nnpm install\nBuild docker image\n\ndocker build --tag nestjs .\nSetup the postgres database\n\ndocker-compose up -d postgis14\nSetup the redis\n\ndocker-compose up -d redisRunning the app\n\nSet environment variables\n\ncp .dev.env.example .env\nRun the server at local\n\n# Development\nnpm run start\n\n# Watch mode\nnpm run start:dev\n\n# Production mode\nnpm run start:prod\n\n# Using docker image which built before\ndocker-compose up -d nestjsDocumentation\n\nThe swagger is built when start the server http://127.0.0.1:3000/api\n\nTo generate the document\n\n\nnpm run documentation:serve\nOpen the generated document http://127.0.0.1:8080\n\nRun test\n\nSet environment variables\n\ncp .test.env.example .env\nCreate the testing database\n\nnpm run typeorm query \"CREATE DATABASE code_scanning_test\"\nRun test\n\nnpm run test\nRun test coverage\n\nnpm run test:covCheck the coverage result on file coverage/lcov-report/index.html\n\nRun end-to-end test\n\nnpm run test:e2e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CacheWrapperModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EventQueueModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ScansModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        WorkersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_CacheWrapperModule\n\n\n\ncluster_CacheWrapperModule_exports\n\n\n\ncluster_CacheWrapperModule_providers\n\n\n\ncluster_EventQueueModule\n\n\n\ncluster_EventQueueModule_imports\n\n\n\ncluster_EventQueueModule_exports\n\n\n\ncluster_EventQueueModule_providers\n\n\n\ncluster_ScansModule\n\n\n\ncluster_ScansModule_exports\n\n\n\ncluster_ScansModule_providers\n\n\n\ncluster_WorkersModule\n\n\n\ncluster_WorkersModule_exports\n\n\n\ncluster_WorkersModule_providers\n\n\n\n\nCacheWrapperModule\n\nCacheWrapperModule\n\n\n\nScansModule\n\nScansModule\n\nScansModule -->\n\nCacheWrapperModule->ScansModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nCacheWrapperModule->AppModule\n\n\n\n\n\nCacheWrapperService \n\nCacheWrapperService \n\nCacheWrapperService  -->\n\nCacheWrapperModule->CacheWrapperService \n\n\n\n\n\nEventQueueModule\n\nEventQueueModule\n\nAppModule -->\n\nEventQueueModule->AppModule\n\n\n\n\n\nEventQueueProducer \n\nEventQueueProducer \n\nEventQueueProducer  -->\n\nEventQueueModule->EventQueueProducer \n\n\n\nAppModule -->\n\nScansModule->AppModule\n\n\n\n\n\nWorkersModule\n\nWorkersModule\n\nWorkersModule -->\n\nScansModule->WorkersModule\n\n\n\n\n\nScanEventContext \n\nScanEventContext \n\nScanEventContext  -->\n\nScansModule->ScanEventContext \n\n\n\n\n\nCacheWrapperService\n\nCacheWrapperService\n\nCacheWrapperModule -->\n\nCacheWrapperService->CacheWrapperModule\n\n\n\nEventQueueModule -->\n\nWorkersModule->EventQueueModule\n\n\n\n\n\nScanEventProcessor \n\nScanEventProcessor \n\nScanEventProcessor  -->\n\nWorkersModule->ScanEventProcessor \n\n\n\n\n\nEventQueueProducer\n\nEventQueueProducer\n\nEventQueueModule -->\n\nEventQueueProducer->EventQueueModule\n\n\n\n\n\nScanEventContext\n\nScanEventContext\n\nScansModule -->\n\nScanEventContext->ScansModule\n\n\n\n\n\nScansService\n\nScansService\n\nScansModule -->\n\nScansService->ScansModule\n\n\n\n\n\nScanEventProcessor\n\nScanEventProcessor\n\nWorkersModule -->\n\nScanEventProcessor->WorkersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        5 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    2 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    2 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    5 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    9 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            MockType   (src/.../common.mock.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/mock/common.mock.ts\n    \n    \n        \n            \n                \n                    \n                    MockType\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            BaseApiResponse   (src/.../base-api-response.decorator.ts)\n                        \n                        \n                            cacheMock   (src/.../cache.mock.ts)\n                        \n                        \n                            dataSource   (src/.../ormconfig.ts)\n                        \n                        \n                            longTtl   (src/.../constants.ts)\n                        \n                        \n                            queueMock   (src/.../queue.mock.ts)\n                        \n                        \n                            repositoryMockFactory   (src/.../repository.mock.factory.ts)\n                        \n                        \n                            View   (src/.../view.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/common/decorators/base-api-response.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        BaseApiResponse\n                        \n                    \n                \n            \n                \n                    \n                        Default value : >(model: TModel) => {\n  return applyDecorators(\n    ApiResponse({\n      schema: {\n        properties: {\n          statusCode: { type: 'number', example: 200 },\n          message: { type: 'string' },\n          data: { $ref: getSchemaPath(model) },\n        },\n      },\n    }),\n  );\n}\n                    \n                \n\n            \n                \n                    The decorator wrap up response swagger\n\n                \n            \n\n        \n    \n\n    src/mock/cache.mock.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        cacheMock\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  get: jest.fn(),\n  set: jest.fn(),\n  reset: jest.fn(),\n  del: jest.fn(),\n  wrap: jest.fn(),\n}\n                    \n                \n\n            \n                \n                    The mock for cache\n\n                \n            \n\n        \n    \n\n    src/database/ormconfig.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        dataSource\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  host: process.env.DATABASE_HOST as string,\n  port: +(process.env.DATABASE_PORT as string),\n  username: process.env.POSTGRES_USER as string,\n  password: process.env.POSTGRES_PASSWORD as string,\n  poolSize: +(process.env.DATABASE_POOL_SIZE as string),\n  type: 'postgres',\n  entities: [],\n  synchronize: false,\n  logging: false,\n  migrations: [`${__dirname}/migrations/*.ts`],\n}\n                    \n                \n\n            \n                \n                    Data source of postgres from the environment\n\n                \n            \n\n        \n    \n\n    src/common/constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        longTtl\n                        \n                    \n                \n            \n                \n                    \n                        Default value : 7 * 24 * 60 * 60 * 1000\n                    \n                \n\n            \n                \n                    The long ttl with 7 days\n\n                \n            \n\n        \n    \n\n    src/mock/queue.mock.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        queueMock\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  add: jest.fn(),\n  process: jest.fn(),\n}\n                    \n                \n\n            \n                \n                    The mock for queue\n\n                \n            \n\n        \n    \n\n    src/mock/repository.mock.factory.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        repositoryMockFactory\n                        \n                    \n                \n            \n                \n                    \n                        Type :         MockType>\n\n                    \n                \n                \n                    \n                        Default value : jest.fn(\n  () => ({\n    save: jest.fn(),\n    findOne: jest.fn((entity) => entity),\n    update: jest.fn(),\n  }),\n)\n                    \n                \n\n            \n                \n                    The mock for repository\n\n                \n            \n\n        \n    \n\n    src/common/decorators/view.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        View\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (view: any) => SetMetadata('view', view)\n                    \n                \n\n            \n                \n                    The decorator to set the view class for the controller\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
